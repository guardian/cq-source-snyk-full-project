/*
Snyk API

Testing AppsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_AppsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AppsAPIService CreateApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.AppsAPI.CreateApp(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService CreateGroupAppInstall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.AppsAPI.CreateGroupAppInstall(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService CreateOrgApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.AppsAPI.CreateOrgApp(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService CreateOrgAppInstall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.AppsAPI.CreateOrgAppInstall(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService DeleteApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var clientId string

		httpRes, err := apiClient.AppsAPI.DeleteApp(context.Background(), orgId, clientId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService DeleteAppBot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var botId string
		var orgId string

		httpRes, err := apiClient.AppsAPI.DeleteAppBot(context.Background(), botId, orgId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService DeleteAppByID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var appId string

		httpRes, err := apiClient.AppsAPI.DeleteAppByID(context.Background(), orgId, appId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService DeleteAppOrgInstallByID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var installId string

		httpRes, err := apiClient.AppsAPI.DeleteAppOrgInstallByID(context.Background(), orgId, installId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService DeleteGroupAppInstallByID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var installId string

		httpRes, err := apiClient.AppsAPI.DeleteGroupAppInstallByID(context.Background(), groupId, installId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService DeleteUserAppInstallByID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var installId string

		httpRes, err := apiClient.AppsAPI.DeleteUserAppInstallByID(context.Background(), installId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService GetApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var clientId string

		resp, httpRes, err := apiClient.AppsAPI.GetApp(context.Background(), orgId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService GetAppBots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.AppsAPI.GetAppBots(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService GetAppByID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var appId string

		resp, httpRes, err := apiClient.AppsAPI.GetAppByID(context.Background(), orgId, appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService GetAppInstallsForGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.AppsAPI.GetAppInstallsForGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService GetAppInstallsForOrg", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.AppsAPI.GetAppInstallsForOrg(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService GetAppInstallsForUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AppsAPI.GetAppInstallsForUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService GetApps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.AppsAPI.GetApps(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService GetOrgApps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.AppsAPI.GetOrgApps(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService GetUserAppSessions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		resp, httpRes, err := apiClient.AppsAPI.GetUserAppSessions(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService GetUserInstalledApps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AppsAPI.GetUserInstalledApps(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService ManageAppCreationSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var appId string

		resp, httpRes, err := apiClient.AppsAPI.ManageAppCreationSecret(context.Background(), orgId, appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService ManageSecrets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var clientId string

		resp, httpRes, err := apiClient.AppsAPI.ManageSecrets(context.Background(), orgId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService RevokeUserAppSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var sessionId string

		httpRes, err := apiClient.AppsAPI.RevokeUserAppSession(context.Background(), appId, sessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService RevokeUserInstalledApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		httpRes, err := apiClient.AppsAPI.RevokeUserInstalledApp(context.Background(), appId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService UpdateApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var clientId string

		resp, httpRes, err := apiClient.AppsAPI.UpdateApp(context.Background(), orgId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService UpdateAppCreationByID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var appId string

		resp, httpRes, err := apiClient.AppsAPI.UpdateAppCreationByID(context.Background(), orgId, appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService UpdateGroupAppInstallSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var installId string

		resp, httpRes, err := apiClient.AppsAPI.UpdateGroupAppInstallSecret(context.Background(), groupId, installId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService UpdateOrgAppInstallSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var installId string

		resp, httpRes, err := apiClient.AppsAPI.UpdateOrgAppInstallSecret(context.Background(), orgId, installId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
