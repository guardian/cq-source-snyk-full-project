/*
Snyk API

Testing ServiceAccountsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ServiceAccountsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ServiceAccountsAPIService CreateGroupServiceAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.ServiceAccountsAPI.CreateGroupServiceAccount(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceAccountsAPIService CreateOrgServiceAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.ServiceAccountsAPI.CreateOrgServiceAccount(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceAccountsAPIService DeleteOneGroupServiceAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var serviceaccountId string

		httpRes, err := apiClient.ServiceAccountsAPI.DeleteOneGroupServiceAccount(context.Background(), groupId, serviceaccountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceAccountsAPIService DeleteServiceAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var serviceaccountId string

		httpRes, err := apiClient.ServiceAccountsAPI.DeleteServiceAccount(context.Background(), orgId, serviceaccountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceAccountsAPIService GetManyGroupServiceAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.ServiceAccountsAPI.GetManyGroupServiceAccount(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceAccountsAPIService GetManyOrgServiceAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.ServiceAccountsAPI.GetManyOrgServiceAccounts(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceAccountsAPIService GetOneGroupServiceAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var serviceaccountId string

		resp, httpRes, err := apiClient.ServiceAccountsAPI.GetOneGroupServiceAccount(context.Background(), groupId, serviceaccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceAccountsAPIService GetOneOrgServiceAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var serviceaccountId string

		resp, httpRes, err := apiClient.ServiceAccountsAPI.GetOneOrgServiceAccount(context.Background(), orgId, serviceaccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceAccountsAPIService UpdateGroupServiceAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var serviceaccountId string

		resp, httpRes, err := apiClient.ServiceAccountsAPI.UpdateGroupServiceAccount(context.Background(), groupId, serviceaccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceAccountsAPIService UpdateOrgServiceAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var serviceaccountId string

		resp, httpRes, err := apiClient.ServiceAccountsAPI.UpdateOrgServiceAccount(context.Background(), orgId, serviceaccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceAccountsAPIService UpdateOrgServiceAccountSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var serviceaccountId string

		resp, httpRes, err := apiClient.ServiceAccountsAPI.UpdateOrgServiceAccountSecret(context.Background(), orgId, serviceaccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceAccountsAPIService UpdateServiceAccountSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var serviceaccountId string

		resp, httpRes, err := apiClient.ServiceAccountsAPI.UpdateServiceAccountSecret(context.Background(), groupId, serviceaccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
