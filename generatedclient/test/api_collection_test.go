/*
Snyk API

Testing CollectionAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_CollectionAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CollectionAPIService CreateCollection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.CollectionAPI.CreateCollection(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionAPIService DeleteCollection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var collectionId string

		httpRes, err := apiClient.CollectionAPI.DeleteCollection(context.Background(), orgId, collectionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionAPIService DeleteProjectsCollection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var collectionId string

		httpRes, err := apiClient.CollectionAPI.DeleteProjectsCollection(context.Background(), orgId, collectionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionAPIService GetCollection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var collectionId string

		resp, httpRes, err := apiClient.CollectionAPI.GetCollection(context.Background(), orgId, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionAPIService GetCollections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.CollectionAPI.GetCollections(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionAPIService GetProjectsOfCollection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var collectionId string

		resp, httpRes, err := apiClient.CollectionAPI.GetProjectsOfCollection(context.Background(), orgId, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionAPIService UpdateCollection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var collectionId string

		resp, httpRes, err := apiClient.CollectionAPI.UpdateCollection(context.Background(), orgId, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionAPIService UpdateCollectionWithProjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var collectionId string

		httpRes, err := apiClient.CollectionAPI.UpdateCollectionWithProjects(context.Background(), orgId, collectionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
