/*
Snyk API

Testing SlackSettingsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_SlackSettingsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SlackSettingsAPIService CreateSlackDefaultNotificationSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var botId string

		resp, httpRes, err := apiClient.SlackSettingsAPI.CreateSlackDefaultNotificationSettings(context.Background(), orgId, botId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SlackSettingsAPIService CreateSlackProjectNotificationSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var projectId string
		var botId string

		resp, httpRes, err := apiClient.SlackSettingsAPI.CreateSlackProjectNotificationSettings(context.Background(), orgId, projectId, botId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SlackSettingsAPIService DeleteSlackDefaultNotificationSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var botId string

		httpRes, err := apiClient.SlackSettingsAPI.DeleteSlackDefaultNotificationSettings(context.Background(), orgId, botId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SlackSettingsAPIService DeleteSlackProjectNotificationSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var projectId string
		var botId string

		httpRes, err := apiClient.SlackSettingsAPI.DeleteSlackProjectNotificationSettings(context.Background(), orgId, projectId, botId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SlackSettingsAPIService GetSlackDefaultNotificationSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var botId string

		resp, httpRes, err := apiClient.SlackSettingsAPI.GetSlackDefaultNotificationSettings(context.Background(), orgId, botId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SlackSettingsAPIService GetSlackProjectNotificationSettingsCollection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var botId string

		resp, httpRes, err := apiClient.SlackSettingsAPI.GetSlackProjectNotificationSettingsCollection(context.Background(), orgId, botId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SlackSettingsAPIService UpdateSlackProjectNotificationSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var botId string
		var projectId string

		resp, httpRes, err := apiClient.SlackSettingsAPI.UpdateSlackProjectNotificationSettings(context.Background(), orgId, botId, projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
