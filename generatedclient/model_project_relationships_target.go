/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	// "bytes"
)

// ProjectRelationshipsTarget - struct for ProjectRelationshipsTarget
type ProjectRelationshipsTarget struct {
	ProjectRelationshipsTarget *ProjectRelationshipsTarget
	Relationship *Relationship
}

// ProjectRelationshipsTargetAsProjectRelationshipsTarget is a convenience function that returns ProjectRelationshipsTarget wrapped in ProjectRelationshipsTarget
func ProjectRelationshipsTargetAsProjectRelationshipsTarget(v *ProjectRelationshipsTarget) ProjectRelationshipsTarget {
	return ProjectRelationshipsTarget{
		ProjectRelationshipsTarget: v,
	}
}

// RelationshipAsProjectRelationshipsTarget is a convenience function that returns Relationship wrapped in ProjectRelationshipsTarget
func RelationshipAsProjectRelationshipsTarget(v *Relationship) ProjectRelationshipsTarget {
	return ProjectRelationshipsTarget{
		Relationship: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ProjectRelationshipsTarget) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ProjectRelationshipsTarget
	err = newStrictDecoder(data).Decode(&dst.ProjectRelationshipsTarget)
	if err == nil {
		jsonProjectRelationshipsTarget, _ := json.Marshal(dst.ProjectRelationshipsTarget)
		if string(jsonProjectRelationshipsTarget) == "{}" { // empty struct
			dst.ProjectRelationshipsTarget = nil
		} else {
			match++
		}
	} else {
		dst.ProjectRelationshipsTarget = nil
	}

	// try to unmarshal data into Relationship
	err = newStrictDecoder(data).Decode(&dst.Relationship)
	if err == nil {
		jsonRelationship, _ := json.Marshal(dst.Relationship)
		if string(jsonRelationship) == "{}" { // empty struct
			dst.Relationship = nil
		} else {
			match++
		}
	} else {
		dst.Relationship = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ProjectRelationshipsTarget = nil
		dst.Relationship = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ProjectRelationshipsTarget)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ProjectRelationshipsTarget)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ProjectRelationshipsTarget) MarshalJSON() ([]byte, error) {
	if src.ProjectRelationshipsTarget != nil {
		return json.Marshal(&src.ProjectRelationshipsTarget)
	}

	if src.Relationship != nil {
		return json.Marshal(&src.Relationship)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ProjectRelationshipsTarget) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ProjectRelationshipsTarget != nil {
		return obj.ProjectRelationshipsTarget
	}

	if obj.Relationship != nil {
		return obj.Relationship
	}

	// all schemas are nil
	return nil
}

type NullableProjectRelationshipsTarget struct {
	value *ProjectRelationshipsTarget
	isSet bool
}

func (v NullableProjectRelationshipsTarget) Get() *ProjectRelationshipsTarget {
	return v.value
}

func (v *NullableProjectRelationshipsTarget) Set(val *ProjectRelationshipsTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectRelationshipsTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectRelationshipsTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectRelationshipsTarget(val *ProjectRelationshipsTarget) *NullableProjectRelationshipsTarget {
	return &NullableProjectRelationshipsTarget{value: val, isSet: true}
}

func (v NullableProjectRelationshipsTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectRelationshipsTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


