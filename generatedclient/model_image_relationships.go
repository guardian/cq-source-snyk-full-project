/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ImageRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageRelationships{}

// ImageRelationships struct for ImageRelationships
type ImageRelationships struct {
	ImageTargetRefs *ImageRelationshipsImageTargetRefs `json:"image_target_refs,omitempty"`
}

// NewImageRelationships instantiates a new ImageRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageRelationships() *ImageRelationships {
	this := ImageRelationships{}
	return &this
}

// NewImageRelationshipsWithDefaults instantiates a new ImageRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageRelationshipsWithDefaults() *ImageRelationships {
	this := ImageRelationships{}
	return &this
}

// GetImageTargetRefs returns the ImageTargetRefs field value if set, zero value otherwise.
func (o *ImageRelationships) GetImageTargetRefs() ImageRelationshipsImageTargetRefs {
	if o == nil || IsNil(o.ImageTargetRefs) {
		var ret ImageRelationshipsImageTargetRefs
		return ret
	}
	return *o.ImageTargetRefs
}

// GetImageTargetRefsOk returns a tuple with the ImageTargetRefs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageRelationships) GetImageTargetRefsOk() (*ImageRelationshipsImageTargetRefs, bool) {
	if o == nil || IsNil(o.ImageTargetRefs) {
		return nil, false
	}
	return o.ImageTargetRefs, true
}

// HasImageTargetRefs returns a boolean if a field has been set.
func (o *ImageRelationships) HasImageTargetRefs() bool {
	if o != nil && !IsNil(o.ImageTargetRefs) {
		return true
	}

	return false
}

// SetImageTargetRefs gets a reference to the given ImageRelationshipsImageTargetRefs and assigns it to the ImageTargetRefs field.
func (o *ImageRelationships) SetImageTargetRefs(v ImageRelationshipsImageTargetRefs) {
	o.ImageTargetRefs = &v
}

func (o ImageRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ImageTargetRefs) {
		toSerialize["image_target_refs"] = o.ImageTargetRefs
	}
	return toSerialize, nil
}

type NullableImageRelationships struct {
	value *ImageRelationships
	isSet bool
}

func (v NullableImageRelationships) Get() *ImageRelationships {
	return v.value
}

func (v *NullableImageRelationships) Set(val *ImageRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableImageRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableImageRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageRelationships(val *ImageRelationships) *NullableImageRelationships {
	return &NullableImageRelationships{value: val, isSet: true}
}

func (v NullableImageRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


