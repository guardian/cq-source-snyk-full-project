/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProjectRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectRelationships{}

// ProjectRelationships struct for ProjectRelationships
type ProjectRelationships struct {
	Importer *Relationship `json:"importer,omitempty"`
	Organization Relationship `json:"organization"`
	Owner *Relationship `json:"owner,omitempty"`
	Target ProjectRelationshipsTarget `json:"target"`
}

type _ProjectRelationships ProjectRelationships

// NewProjectRelationships instantiates a new ProjectRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectRelationships(organization Relationship, target ProjectRelationshipsTarget) *ProjectRelationships {
	this := ProjectRelationships{}
	this.Organization = organization
	this.Target = target
	return &this
}

// NewProjectRelationshipsWithDefaults instantiates a new ProjectRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectRelationshipsWithDefaults() *ProjectRelationships {
	this := ProjectRelationships{}
	return &this
}

// GetImporter returns the Importer field value if set, zero value otherwise.
func (o *ProjectRelationships) GetImporter() Relationship {
	if o == nil || IsNil(o.Importer) {
		var ret Relationship
		return ret
	}
	return *o.Importer
}

// GetImporterOk returns a tuple with the Importer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRelationships) GetImporterOk() (*Relationship, bool) {
	if o == nil || IsNil(o.Importer) {
		return nil, false
	}
	return o.Importer, true
}

// HasImporter returns a boolean if a field has been set.
func (o *ProjectRelationships) HasImporter() bool {
	if o != nil && !IsNil(o.Importer) {
		return true
	}

	return false
}

// SetImporter gets a reference to the given Relationship and assigns it to the Importer field.
func (o *ProjectRelationships) SetImporter(v Relationship) {
	o.Importer = &v
}

// GetOrganization returns the Organization field value
func (o *ProjectRelationships) GetOrganization() Relationship {
	if o == nil {
		var ret Relationship
		return ret
	}

	return o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value
// and a boolean to check if the value has been set.
func (o *ProjectRelationships) GetOrganizationOk() (*Relationship, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Organization, true
}

// SetOrganization sets field value
func (o *ProjectRelationships) SetOrganization(v Relationship) {
	o.Organization = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ProjectRelationships) GetOwner() Relationship {
	if o == nil || IsNil(o.Owner) {
		var ret Relationship
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRelationships) GetOwnerOk() (*Relationship, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ProjectRelationships) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given Relationship and assigns it to the Owner field.
func (o *ProjectRelationships) SetOwner(v Relationship) {
	o.Owner = &v
}

// GetTarget returns the Target field value
func (o *ProjectRelationships) GetTarget() ProjectRelationshipsTarget {
	if o == nil {
		var ret ProjectRelationshipsTarget
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *ProjectRelationships) GetTargetOk() (*ProjectRelationshipsTarget, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *ProjectRelationships) SetTarget(v ProjectRelationshipsTarget) {
	o.Target = v
}

func (o ProjectRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Importer) {
		toSerialize["importer"] = o.Importer
	}
	toSerialize["organization"] = o.Organization
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	toSerialize["target"] = o.Target
	return toSerialize, nil
}

func (o *ProjectRelationships) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"organization",
		"target",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectRelationships := _ProjectRelationships{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectRelationships)

	if err != nil {
		return err
	}

	*o = ProjectRelationships(varProjectRelationships)

	return err
}

type NullableProjectRelationships struct {
	value *ProjectRelationships
	isSet bool
}

func (v NullableProjectRelationships) Get() *ProjectRelationships {
	return v.value
}

func (v *NullableProjectRelationships) Set(val *ProjectRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectRelationships(val *ProjectRelationships) *NullableProjectRelationships {
	return &NullableProjectRelationships{value: val, isSet: true}
}

func (v NullableProjectRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


