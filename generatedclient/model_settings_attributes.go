/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SettingsAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingsAttributes{}

// SettingsAttributes struct for SettingsAttributes
type SettingsAttributes struct {
	SeverityThreshold SeverityThreshold `json:"severity_threshold"`
	TargetChannelId string `json:"target_channel_id"`
}

type _SettingsAttributes SettingsAttributes

// NewSettingsAttributes instantiates a new SettingsAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsAttributes(severityThreshold SeverityThreshold, targetChannelId string) *SettingsAttributes {
	this := SettingsAttributes{}
	this.SeverityThreshold = severityThreshold
	this.TargetChannelId = targetChannelId
	return &this
}

// NewSettingsAttributesWithDefaults instantiates a new SettingsAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsAttributesWithDefaults() *SettingsAttributes {
	this := SettingsAttributes{}
	return &this
}

// GetSeverityThreshold returns the SeverityThreshold field value
func (o *SettingsAttributes) GetSeverityThreshold() SeverityThreshold {
	if o == nil {
		var ret SeverityThreshold
		return ret
	}

	return o.SeverityThreshold
}

// GetSeverityThresholdOk returns a tuple with the SeverityThreshold field value
// and a boolean to check if the value has been set.
func (o *SettingsAttributes) GetSeverityThresholdOk() (*SeverityThreshold, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeverityThreshold, true
}

// SetSeverityThreshold sets field value
func (o *SettingsAttributes) SetSeverityThreshold(v SeverityThreshold) {
	o.SeverityThreshold = v
}

// GetTargetChannelId returns the TargetChannelId field value
func (o *SettingsAttributes) GetTargetChannelId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetChannelId
}

// GetTargetChannelIdOk returns a tuple with the TargetChannelId field value
// and a boolean to check if the value has been set.
func (o *SettingsAttributes) GetTargetChannelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetChannelId, true
}

// SetTargetChannelId sets field value
func (o *SettingsAttributes) SetTargetChannelId(v string) {
	o.TargetChannelId = v
}

func (o SettingsAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingsAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["severity_threshold"] = o.SeverityThreshold
	toSerialize["target_channel_id"] = o.TargetChannelId
	return toSerialize, nil
}

func (o *SettingsAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"severity_threshold",
		"target_channel_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSettingsAttributes := _SettingsAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSettingsAttributes)

	if err != nil {
		return err
	}

	*o = SettingsAttributes(varSettingsAttributes)

	return err
}

type NullableSettingsAttributes struct {
	value *SettingsAttributes
	isSet bool
}

func (v NullableSettingsAttributes) Get() *SettingsAttributes {
	return v.value
}

func (v *NullableSettingsAttributes) Set(val *SettingsAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsAttributes(val *SettingsAttributes) *NullableSettingsAttributes {
	return &NullableSettingsAttributes{value: val, isSet: true}
}

func (v NullableSettingsAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


