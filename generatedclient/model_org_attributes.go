/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the OrgAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrgAttributes{}

// OrgAttributes struct for OrgAttributes
type OrgAttributes struct {
	// The time the organization was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The Snyk ID of the group to which the organization belongs.
	GroupId *string `json:"group_id,omitempty"`
	// Whether the organization is independent (that is, not part of a group).
	IsPersonal bool `json:"is_personal"`
	// The display name of the organization.
	Name string `json:"name"`
	// The canonical (unique and URL-friendly) name of the organization.
	Slug string `json:"slug"`
	// The time the organization was last modified.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

type _OrgAttributes OrgAttributes

// NewOrgAttributes instantiates a new OrgAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgAttributes(isPersonal bool, name string, slug string) *OrgAttributes {
	this := OrgAttributes{}
	this.IsPersonal = isPersonal
	this.Name = name
	this.Slug = slug
	return &this
}

// NewOrgAttributesWithDefaults instantiates a new OrgAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgAttributesWithDefaults() *OrgAttributes {
	this := OrgAttributes{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *OrgAttributes) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *OrgAttributes) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *OrgAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *OrgAttributes) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgAttributes) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *OrgAttributes) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *OrgAttributes) SetGroupId(v string) {
	o.GroupId = &v
}

// GetIsPersonal returns the IsPersonal field value
func (o *OrgAttributes) GetIsPersonal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPersonal
}

// GetIsPersonalOk returns a tuple with the IsPersonal field value
// and a boolean to check if the value has been set.
func (o *OrgAttributes) GetIsPersonalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPersonal, true
}

// SetIsPersonal sets field value
func (o *OrgAttributes) SetIsPersonal(v bool) {
	o.IsPersonal = v
}

// GetName returns the Name field value
func (o *OrgAttributes) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OrgAttributes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OrgAttributes) SetName(v string) {
	o.Name = v
}

// GetSlug returns the Slug field value
func (o *OrgAttributes) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *OrgAttributes) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *OrgAttributes) SetSlug(v string) {
	o.Slug = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *OrgAttributes) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgAttributes) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *OrgAttributes) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *OrgAttributes) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o OrgAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrgAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	toSerialize["is_personal"] = o.IsPersonal
	toSerialize["name"] = o.Name
	toSerialize["slug"] = o.Slug
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *OrgAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_personal",
		"name",
		"slug",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrgAttributes := _OrgAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrgAttributes)

	if err != nil {
		return err
	}

	*o = OrgAttributes(varOrgAttributes)

	return err
}

type NullableOrgAttributes struct {
	value *OrgAttributes
	isSet bool
}

func (v NullableOrgAttributes) Get() *OrgAttributes {
	return v.value
}

func (v *NullableOrgAttributes) Set(val *OrgAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgAttributes(val *OrgAttributes) *NullableOrgAttributes {
	return &NullableOrgAttributes{value: val, isSet: true}
}

func (v NullableOrgAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


