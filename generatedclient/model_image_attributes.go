/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImageAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageAttributes{}

// ImageAttributes struct for ImageAttributes
type ImageAttributes struct {
	Layers []string `json:"layers"`
	Names []string `json:"names,omitempty"`
	Platform Platform `json:"platform"`
}

type _ImageAttributes ImageAttributes

// NewImageAttributes instantiates a new ImageAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageAttributes(layers []string, platform Platform) *ImageAttributes {
	this := ImageAttributes{}
	this.Layers = layers
	this.Platform = platform
	return &this
}

// NewImageAttributesWithDefaults instantiates a new ImageAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageAttributesWithDefaults() *ImageAttributes {
	this := ImageAttributes{}
	return &this
}

// GetLayers returns the Layers field value
func (o *ImageAttributes) GetLayers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Layers
}

// GetLayersOk returns a tuple with the Layers field value
// and a boolean to check if the value has been set.
func (o *ImageAttributes) GetLayersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Layers, true
}

// SetLayers sets field value
func (o *ImageAttributes) SetLayers(v []string) {
	o.Layers = v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *ImageAttributes) GetNames() []string {
	if o == nil || IsNil(o.Names) {
		var ret []string
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageAttributes) GetNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.Names) {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *ImageAttributes) HasNames() bool {
	if o != nil && !IsNil(o.Names) {
		return true
	}

	return false
}

// SetNames gets a reference to the given []string and assigns it to the Names field.
func (o *ImageAttributes) SetNames(v []string) {
	o.Names = v
}

// GetPlatform returns the Platform field value
func (o *ImageAttributes) GetPlatform() Platform {
	if o == nil {
		var ret Platform
		return ret
	}

	return o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value
// and a boolean to check if the value has been set.
func (o *ImageAttributes) GetPlatformOk() (*Platform, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Platform, true
}

// SetPlatform sets field value
func (o *ImageAttributes) SetPlatform(v Platform) {
	o.Platform = v
}

func (o ImageAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["layers"] = o.Layers
	if !IsNil(o.Names) {
		toSerialize["names"] = o.Names
	}
	toSerialize["platform"] = o.Platform
	return toSerialize, nil
}

func (o *ImageAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"layers",
		"platform",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImageAttributes := _ImageAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImageAttributes)

	if err != nil {
		return err
	}

	*o = ImageAttributes(varImageAttributes)

	return err
}

type NullableImageAttributes struct {
	value *ImageAttributes
	isSet bool
}

func (v NullableImageAttributes) Get() *ImageAttributes {
	return v.value
}

func (v *NullableImageAttributes) Set(val *ImageAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableImageAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableImageAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageAttributes(val *ImageAttributes) *NullableImageAttributes {
	return &NullableImageAttributes{value: val, isSet: true}
}

func (v NullableImageAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


