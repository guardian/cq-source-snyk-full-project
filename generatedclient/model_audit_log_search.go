/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuditLogSearch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLogSearch{}

// AuditLogSearch struct for AuditLogSearch
type AuditLogSearch struct {
	Items []AuditLogSearchItemsInner `json:"items,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewAuditLogSearch instantiates a new AuditLogSearch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogSearch() *AuditLogSearch {
	this := AuditLogSearch{}
	return &this
}

// NewAuditLogSearchWithDefaults instantiates a new AuditLogSearch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogSearchWithDefaults() *AuditLogSearch {
	this := AuditLogSearch{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *AuditLogSearch) GetItems() []AuditLogSearchItemsInner {
	if o == nil || IsNil(o.Items) {
		var ret []AuditLogSearchItemsInner
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogSearch) GetItemsOk() ([]AuditLogSearchItemsInner, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *AuditLogSearch) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []AuditLogSearchItemsInner and assigns it to the Items field.
func (o *AuditLogSearch) SetItems(v []AuditLogSearchItemsInner) {
	o.Items = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AuditLogSearch) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogSearch) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AuditLogSearch) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AuditLogSearch) SetType(v string) {
	o.Type = &v
}

func (o AuditLogSearch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditLogSearch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableAuditLogSearch struct {
	value *AuditLogSearch
	isSet bool
}

func (v NullableAuditLogSearch) Get() *AuditLogSearch {
	return v.value
}

func (v *NullableAuditLogSearch) Set(val *AuditLogSearch) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogSearch) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogSearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogSearch(val *AuditLogSearch) *NullableAuditLogSearch {
	return &NullableAuditLogSearch{value: val, isSet: true}
}

func (v NullableAuditLogSearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogSearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


