/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RemedyDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemedyDetails{}

// RemedyDetails struct for RemedyDetails
type RemedyDetails struct {
	// A minimum version to upgrade to in order to remedy the issue.
	UpgradePackage *string `json:"upgrade_package,omitempty"`
}

// NewRemedyDetails instantiates a new RemedyDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemedyDetails() *RemedyDetails {
	this := RemedyDetails{}
	return &this
}

// NewRemedyDetailsWithDefaults instantiates a new RemedyDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemedyDetailsWithDefaults() *RemedyDetails {
	this := RemedyDetails{}
	return &this
}

// GetUpgradePackage returns the UpgradePackage field value if set, zero value otherwise.
func (o *RemedyDetails) GetUpgradePackage() string {
	if o == nil || IsNil(o.UpgradePackage) {
		var ret string
		return ret
	}
	return *o.UpgradePackage
}

// GetUpgradePackageOk returns a tuple with the UpgradePackage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemedyDetails) GetUpgradePackageOk() (*string, bool) {
	if o == nil || IsNil(o.UpgradePackage) {
		return nil, false
	}
	return o.UpgradePackage, true
}

// HasUpgradePackage returns a boolean if a field has been set.
func (o *RemedyDetails) HasUpgradePackage() bool {
	if o != nil && !IsNil(o.UpgradePackage) {
		return true
	}

	return false
}

// SetUpgradePackage gets a reference to the given string and assigns it to the UpgradePackage field.
func (o *RemedyDetails) SetUpgradePackage(v string) {
	o.UpgradePackage = &v
}

func (o RemedyDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemedyDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UpgradePackage) {
		toSerialize["upgrade_package"] = o.UpgradePackage
	}
	return toSerialize, nil
}

type NullableRemedyDetails struct {
	value *RemedyDetails
	isSet bool
}

func (v NullableRemedyDetails) Get() *RemedyDetails {
	return v.value
}

func (v *NullableRemedyDetails) Set(val *RemedyDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableRemedyDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableRemedyDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemedyDetails(val *RemedyDetails) *NullableRemedyDetails {
	return &NullableRemedyDetails{value: val, isSet: true}
}

func (v NullableRemedyDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemedyDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


