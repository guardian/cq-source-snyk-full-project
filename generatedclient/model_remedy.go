/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Remedy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Remedy{}

// Remedy struct for Remedy
type Remedy struct {
	// A markdown-formatted optional description of this remedy.
	Description *string `json:"description,omitempty"`
	Details *RemedyDetails `json:"details,omitempty"`
	// The type of the remedy. Always ‘indeterminate’.
	Type *string `json:"type,omitempty"`
}

// NewRemedy instantiates a new Remedy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemedy() *Remedy {
	this := Remedy{}
	return &this
}

// NewRemedyWithDefaults instantiates a new Remedy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemedyWithDefaults() *Remedy {
	this := Remedy{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Remedy) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Remedy) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Remedy) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Remedy) SetDescription(v string) {
	o.Description = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Remedy) GetDetails() RemedyDetails {
	if o == nil || IsNil(o.Details) {
		var ret RemedyDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Remedy) GetDetailsOk() (*RemedyDetails, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Remedy) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given RemedyDetails and assigns it to the Details field.
func (o *Remedy) SetDetails(v RemedyDetails) {
	o.Details = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Remedy) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Remedy) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Remedy) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Remedy) SetType(v string) {
	o.Type = &v
}

func (o Remedy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Remedy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRemedy struct {
	value *Remedy
	isSet bool
}

func (v NullableRemedy) Get() *Remedy {
	return v.value
}

func (v *NullableRemedy) Set(val *Remedy) {
	v.value = val
	v.isSet = true
}

func (v NullableRemedy) IsSet() bool {
	return v.isSet
}

func (v *NullableRemedy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemedy(val *Remedy) *NullableRemedy {
	return &NullableRemedy{value: val, isSet: true}
}

func (v NullableRemedy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemedy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


