/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateCollectionRequestData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCollectionRequestData{}

// UpdateCollectionRequestData struct for UpdateCollectionRequestData
type UpdateCollectionRequestData struct {
	Attributes CreateCollectionRequestDataAttributes `json:"attributes"`
	Id *string `json:"id,omitempty"`
	Type string `json:"type"`
}

type _UpdateCollectionRequestData UpdateCollectionRequestData

// NewUpdateCollectionRequestData instantiates a new UpdateCollectionRequestData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCollectionRequestData(attributes CreateCollectionRequestDataAttributes, type_ string) *UpdateCollectionRequestData {
	this := UpdateCollectionRequestData{}
	this.Attributes = attributes
	this.Type = type_
	return &this
}

// NewUpdateCollectionRequestDataWithDefaults instantiates a new UpdateCollectionRequestData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCollectionRequestDataWithDefaults() *UpdateCollectionRequestData {
	this := UpdateCollectionRequestData{}
	return &this
}

// GetAttributes returns the Attributes field value
func (o *UpdateCollectionRequestData) GetAttributes() CreateCollectionRequestDataAttributes {
	if o == nil {
		var ret CreateCollectionRequestDataAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *UpdateCollectionRequestData) GetAttributesOk() (*CreateCollectionRequestDataAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *UpdateCollectionRequestData) SetAttributes(v CreateCollectionRequestDataAttributes) {
	o.Attributes = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdateCollectionRequestData) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCollectionRequestData) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdateCollectionRequestData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UpdateCollectionRequestData) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value
func (o *UpdateCollectionRequestData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UpdateCollectionRequestData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UpdateCollectionRequestData) SetType(v string) {
	o.Type = v
}

func (o UpdateCollectionRequestData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCollectionRequestData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attributes"] = o.Attributes
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *UpdateCollectionRequestData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attributes",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateCollectionRequestData := _UpdateCollectionRequestData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateCollectionRequestData)

	if err != nil {
		return err
	}

	*o = UpdateCollectionRequestData(varUpdateCollectionRequestData)

	return err
}

type NullableUpdateCollectionRequestData struct {
	value *UpdateCollectionRequestData
	isSet bool
}

func (v NullableUpdateCollectionRequestData) Get() *UpdateCollectionRequestData {
	return v.value
}

func (v *NullableUpdateCollectionRequestData) Set(val *UpdateCollectionRequestData) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCollectionRequestData) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCollectionRequestData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCollectionRequestData(val *UpdateCollectionRequestData) *NullableUpdateCollectionRequestData {
	return &NullableUpdateCollectionRequestData{value: val, isSet: true}
}

func (v NullableUpdateCollectionRequestData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCollectionRequestData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


