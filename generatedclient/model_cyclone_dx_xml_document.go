/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CycloneDxXmlDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CycloneDxXmlDocument{}

// CycloneDxXmlDocument struct for CycloneDxXmlDocument
type CycloneDxXmlDocument struct {
	// A list of included software components
	Components []CycloneDxComponent `json:"components"`
	Dependencies []CycloneDxDependency `json:"dependencies"`
	Metadata CycloneDxMetadata `json:"metadata"`
}

type _CycloneDxXmlDocument CycloneDxXmlDocument

// NewCycloneDxXmlDocument instantiates a new CycloneDxXmlDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCycloneDxXmlDocument(components []CycloneDxComponent, dependencies []CycloneDxDependency, metadata CycloneDxMetadata) *CycloneDxXmlDocument {
	this := CycloneDxXmlDocument{}
	this.Components = components
	this.Dependencies = dependencies
	this.Metadata = metadata
	return &this
}

// NewCycloneDxXmlDocumentWithDefaults instantiates a new CycloneDxXmlDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCycloneDxXmlDocumentWithDefaults() *CycloneDxXmlDocument {
	this := CycloneDxXmlDocument{}
	return &this
}

// GetComponents returns the Components field value
func (o *CycloneDxXmlDocument) GetComponents() []CycloneDxComponent {
	if o == nil {
		var ret []CycloneDxComponent
		return ret
	}

	return o.Components
}

// GetComponentsOk returns a tuple with the Components field value
// and a boolean to check if the value has been set.
func (o *CycloneDxXmlDocument) GetComponentsOk() ([]CycloneDxComponent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Components, true
}

// SetComponents sets field value
func (o *CycloneDxXmlDocument) SetComponents(v []CycloneDxComponent) {
	o.Components = v
}

// GetDependencies returns the Dependencies field value
func (o *CycloneDxXmlDocument) GetDependencies() []CycloneDxDependency {
	if o == nil {
		var ret []CycloneDxDependency
		return ret
	}

	return o.Dependencies
}

// GetDependenciesOk returns a tuple with the Dependencies field value
// and a boolean to check if the value has been set.
func (o *CycloneDxXmlDocument) GetDependenciesOk() ([]CycloneDxDependency, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dependencies, true
}

// SetDependencies sets field value
func (o *CycloneDxXmlDocument) SetDependencies(v []CycloneDxDependency) {
	o.Dependencies = v
}

// GetMetadata returns the Metadata field value
func (o *CycloneDxXmlDocument) GetMetadata() CycloneDxMetadata {
	if o == nil {
		var ret CycloneDxMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *CycloneDxXmlDocument) GetMetadataOk() (*CycloneDxMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *CycloneDxXmlDocument) SetMetadata(v CycloneDxMetadata) {
	o.Metadata = v
}

func (o CycloneDxXmlDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CycloneDxXmlDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["components"] = o.Components
	toSerialize["dependencies"] = o.Dependencies
	toSerialize["metadata"] = o.Metadata
	return toSerialize, nil
}

func (o *CycloneDxXmlDocument) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"components",
		"dependencies",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCycloneDxXmlDocument := _CycloneDxXmlDocument{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCycloneDxXmlDocument)

	if err != nil {
		return err
	}

	*o = CycloneDxXmlDocument(varCycloneDxXmlDocument)

	return err
}

type NullableCycloneDxXmlDocument struct {
	value *CycloneDxXmlDocument
	isSet bool
}

func (v NullableCycloneDxXmlDocument) Get() *CycloneDxXmlDocument {
	return v.value
}

func (v *NullableCycloneDxXmlDocument) Set(val *CycloneDxXmlDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableCycloneDxXmlDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableCycloneDxXmlDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCycloneDxXmlDocument(val *CycloneDxXmlDocument) *NullableCycloneDxXmlDocument {
	return &NullableCycloneDxXmlDocument{value: val, isSet: true}
}

func (v NullableCycloneDxXmlDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCycloneDxXmlDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


