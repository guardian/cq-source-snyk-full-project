/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProjectSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectSettings{}

// ProjectSettings struct for ProjectSettings
type ProjectSettings struct {
	AutoDependencyUpgrade *AutoDependencyUpgradeSettings `json:"auto_dependency_upgrade,omitempty"`
	AutoRemediationPrs *AutoRemediationPRsSettings `json:"auto_remediation_prs,omitempty"`
	ManualRemediationPrs *ManualRemediationPRsSettings `json:"manual_remediation_prs,omitempty"`
	PullRequestAssignment *PullRequestAssignmentSettings `json:"pull_request_assignment,omitempty"`
	PullRequests PullRequestsSettings `json:"pull_requests"`
	RecurringTests RecurringTestsSettings `json:"recurring_tests"`
}

type _ProjectSettings ProjectSettings

// NewProjectSettings instantiates a new ProjectSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectSettings(pullRequests PullRequestsSettings, recurringTests RecurringTestsSettings) *ProjectSettings {
	this := ProjectSettings{}
	this.PullRequests = pullRequests
	this.RecurringTests = recurringTests
	return &this
}

// NewProjectSettingsWithDefaults instantiates a new ProjectSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectSettingsWithDefaults() *ProjectSettings {
	this := ProjectSettings{}
	return &this
}

// GetAutoDependencyUpgrade returns the AutoDependencyUpgrade field value if set, zero value otherwise.
func (o *ProjectSettings) GetAutoDependencyUpgrade() AutoDependencyUpgradeSettings {
	if o == nil || IsNil(o.AutoDependencyUpgrade) {
		var ret AutoDependencyUpgradeSettings
		return ret
	}
	return *o.AutoDependencyUpgrade
}

// GetAutoDependencyUpgradeOk returns a tuple with the AutoDependencyUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectSettings) GetAutoDependencyUpgradeOk() (*AutoDependencyUpgradeSettings, bool) {
	if o == nil || IsNil(o.AutoDependencyUpgrade) {
		return nil, false
	}
	return o.AutoDependencyUpgrade, true
}

// HasAutoDependencyUpgrade returns a boolean if a field has been set.
func (o *ProjectSettings) HasAutoDependencyUpgrade() bool {
	if o != nil && !IsNil(o.AutoDependencyUpgrade) {
		return true
	}

	return false
}

// SetAutoDependencyUpgrade gets a reference to the given AutoDependencyUpgradeSettings and assigns it to the AutoDependencyUpgrade field.
func (o *ProjectSettings) SetAutoDependencyUpgrade(v AutoDependencyUpgradeSettings) {
	o.AutoDependencyUpgrade = &v
}

// GetAutoRemediationPrs returns the AutoRemediationPrs field value if set, zero value otherwise.
func (o *ProjectSettings) GetAutoRemediationPrs() AutoRemediationPRsSettings {
	if o == nil || IsNil(o.AutoRemediationPrs) {
		var ret AutoRemediationPRsSettings
		return ret
	}
	return *o.AutoRemediationPrs
}

// GetAutoRemediationPrsOk returns a tuple with the AutoRemediationPrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectSettings) GetAutoRemediationPrsOk() (*AutoRemediationPRsSettings, bool) {
	if o == nil || IsNil(o.AutoRemediationPrs) {
		return nil, false
	}
	return o.AutoRemediationPrs, true
}

// HasAutoRemediationPrs returns a boolean if a field has been set.
func (o *ProjectSettings) HasAutoRemediationPrs() bool {
	if o != nil && !IsNil(o.AutoRemediationPrs) {
		return true
	}

	return false
}

// SetAutoRemediationPrs gets a reference to the given AutoRemediationPRsSettings and assigns it to the AutoRemediationPrs field.
func (o *ProjectSettings) SetAutoRemediationPrs(v AutoRemediationPRsSettings) {
	o.AutoRemediationPrs = &v
}

// GetManualRemediationPrs returns the ManualRemediationPrs field value if set, zero value otherwise.
func (o *ProjectSettings) GetManualRemediationPrs() ManualRemediationPRsSettings {
	if o == nil || IsNil(o.ManualRemediationPrs) {
		var ret ManualRemediationPRsSettings
		return ret
	}
	return *o.ManualRemediationPrs
}

// GetManualRemediationPrsOk returns a tuple with the ManualRemediationPrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectSettings) GetManualRemediationPrsOk() (*ManualRemediationPRsSettings, bool) {
	if o == nil || IsNil(o.ManualRemediationPrs) {
		return nil, false
	}
	return o.ManualRemediationPrs, true
}

// HasManualRemediationPrs returns a boolean if a field has been set.
func (o *ProjectSettings) HasManualRemediationPrs() bool {
	if o != nil && !IsNil(o.ManualRemediationPrs) {
		return true
	}

	return false
}

// SetManualRemediationPrs gets a reference to the given ManualRemediationPRsSettings and assigns it to the ManualRemediationPrs field.
func (o *ProjectSettings) SetManualRemediationPrs(v ManualRemediationPRsSettings) {
	o.ManualRemediationPrs = &v
}

// GetPullRequestAssignment returns the PullRequestAssignment field value if set, zero value otherwise.
func (o *ProjectSettings) GetPullRequestAssignment() PullRequestAssignmentSettings {
	if o == nil || IsNil(o.PullRequestAssignment) {
		var ret PullRequestAssignmentSettings
		return ret
	}
	return *o.PullRequestAssignment
}

// GetPullRequestAssignmentOk returns a tuple with the PullRequestAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectSettings) GetPullRequestAssignmentOk() (*PullRequestAssignmentSettings, bool) {
	if o == nil || IsNil(o.PullRequestAssignment) {
		return nil, false
	}
	return o.PullRequestAssignment, true
}

// HasPullRequestAssignment returns a boolean if a field has been set.
func (o *ProjectSettings) HasPullRequestAssignment() bool {
	if o != nil && !IsNil(o.PullRequestAssignment) {
		return true
	}

	return false
}

// SetPullRequestAssignment gets a reference to the given PullRequestAssignmentSettings and assigns it to the PullRequestAssignment field.
func (o *ProjectSettings) SetPullRequestAssignment(v PullRequestAssignmentSettings) {
	o.PullRequestAssignment = &v
}

// GetPullRequests returns the PullRequests field value
func (o *ProjectSettings) GetPullRequests() PullRequestsSettings {
	if o == nil {
		var ret PullRequestsSettings
		return ret
	}

	return o.PullRequests
}

// GetPullRequestsOk returns a tuple with the PullRequests field value
// and a boolean to check if the value has been set.
func (o *ProjectSettings) GetPullRequestsOk() (*PullRequestsSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PullRequests, true
}

// SetPullRequests sets field value
func (o *ProjectSettings) SetPullRequests(v PullRequestsSettings) {
	o.PullRequests = v
}

// GetRecurringTests returns the RecurringTests field value
func (o *ProjectSettings) GetRecurringTests() RecurringTestsSettings {
	if o == nil {
		var ret RecurringTestsSettings
		return ret
	}

	return o.RecurringTests
}

// GetRecurringTestsOk returns a tuple with the RecurringTests field value
// and a boolean to check if the value has been set.
func (o *ProjectSettings) GetRecurringTestsOk() (*RecurringTestsSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecurringTests, true
}

// SetRecurringTests sets field value
func (o *ProjectSettings) SetRecurringTests(v RecurringTestsSettings) {
	o.RecurringTests = v
}

func (o ProjectSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoDependencyUpgrade) {
		toSerialize["auto_dependency_upgrade"] = o.AutoDependencyUpgrade
	}
	if !IsNil(o.AutoRemediationPrs) {
		toSerialize["auto_remediation_prs"] = o.AutoRemediationPrs
	}
	if !IsNil(o.ManualRemediationPrs) {
		toSerialize["manual_remediation_prs"] = o.ManualRemediationPrs
	}
	if !IsNil(o.PullRequestAssignment) {
		toSerialize["pull_request_assignment"] = o.PullRequestAssignment
	}
	toSerialize["pull_requests"] = o.PullRequests
	toSerialize["recurring_tests"] = o.RecurringTests
	return toSerialize, nil
}

func (o *ProjectSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pull_requests",
		"recurring_tests",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectSettings := _ProjectSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectSettings)

	if err != nil {
		return err
	}

	*o = ProjectSettings(varProjectSettings)

	return err
}

type NullableProjectSettings struct {
	value *ProjectSettings
	isSet bool
}

func (v NullableProjectSettings) Get() *ProjectSettings {
	return v.value
}

func (v *NullableProjectSettings) Set(val *ProjectSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectSettings(val *ProjectSettings) *NullableProjectSettings {
	return &NullableProjectSettings{value: val, isSet: true}
}

func (v NullableProjectSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


