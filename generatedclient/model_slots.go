/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Slots type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Slots{}

// Slots struct for Slots
type Slots struct {
	// The time at which this vulnerability was disclosed.
	DisclosureTime *time.Time `json:"disclosure_time,omitempty"`
	// The exploit maturity. Value of ‘No Data’, ‘Not Defined’, ‘Unproven’, ‘Proof of Concept’, ‘Functional’ or ‘High’.
	Exploit *string `json:"exploit,omitempty"`
	// The time at which this vulnerability was published.
	PublicationTime *string `json:"publication_time,omitempty"`
	References []SlotsReferencesInner `json:"references,omitempty"`
}

// NewSlots instantiates a new Slots object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlots() *Slots {
	this := Slots{}
	return &this
}

// NewSlotsWithDefaults instantiates a new Slots object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlotsWithDefaults() *Slots {
	this := Slots{}
	return &this
}

// GetDisclosureTime returns the DisclosureTime field value if set, zero value otherwise.
func (o *Slots) GetDisclosureTime() time.Time {
	if o == nil || IsNil(o.DisclosureTime) {
		var ret time.Time
		return ret
	}
	return *o.DisclosureTime
}

// GetDisclosureTimeOk returns a tuple with the DisclosureTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Slots) GetDisclosureTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DisclosureTime) {
		return nil, false
	}
	return o.DisclosureTime, true
}

// HasDisclosureTime returns a boolean if a field has been set.
func (o *Slots) HasDisclosureTime() bool {
	if o != nil && !IsNil(o.DisclosureTime) {
		return true
	}

	return false
}

// SetDisclosureTime gets a reference to the given time.Time and assigns it to the DisclosureTime field.
func (o *Slots) SetDisclosureTime(v time.Time) {
	o.DisclosureTime = &v
}

// GetExploit returns the Exploit field value if set, zero value otherwise.
func (o *Slots) GetExploit() string {
	if o == nil || IsNil(o.Exploit) {
		var ret string
		return ret
	}
	return *o.Exploit
}

// GetExploitOk returns a tuple with the Exploit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Slots) GetExploitOk() (*string, bool) {
	if o == nil || IsNil(o.Exploit) {
		return nil, false
	}
	return o.Exploit, true
}

// HasExploit returns a boolean if a field has been set.
func (o *Slots) HasExploit() bool {
	if o != nil && !IsNil(o.Exploit) {
		return true
	}

	return false
}

// SetExploit gets a reference to the given string and assigns it to the Exploit field.
func (o *Slots) SetExploit(v string) {
	o.Exploit = &v
}

// GetPublicationTime returns the PublicationTime field value if set, zero value otherwise.
func (o *Slots) GetPublicationTime() string {
	if o == nil || IsNil(o.PublicationTime) {
		var ret string
		return ret
	}
	return *o.PublicationTime
}

// GetPublicationTimeOk returns a tuple with the PublicationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Slots) GetPublicationTimeOk() (*string, bool) {
	if o == nil || IsNil(o.PublicationTime) {
		return nil, false
	}
	return o.PublicationTime, true
}

// HasPublicationTime returns a boolean if a field has been set.
func (o *Slots) HasPublicationTime() bool {
	if o != nil && !IsNil(o.PublicationTime) {
		return true
	}

	return false
}

// SetPublicationTime gets a reference to the given string and assigns it to the PublicationTime field.
func (o *Slots) SetPublicationTime(v string) {
	o.PublicationTime = &v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *Slots) GetReferences() []SlotsReferencesInner {
	if o == nil || IsNil(o.References) {
		var ret []SlotsReferencesInner
		return ret
	}
	return o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Slots) GetReferencesOk() ([]SlotsReferencesInner, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *Slots) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given []SlotsReferencesInner and assigns it to the References field.
func (o *Slots) SetReferences(v []SlotsReferencesInner) {
	o.References = v
}

func (o Slots) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Slots) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisclosureTime) {
		toSerialize["disclosure_time"] = o.DisclosureTime
	}
	if !IsNil(o.Exploit) {
		toSerialize["exploit"] = o.Exploit
	}
	if !IsNil(o.PublicationTime) {
		toSerialize["publication_time"] = o.PublicationTime
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	return toSerialize, nil
}

type NullableSlots struct {
	value *Slots
	isSet bool
}

func (v NullableSlots) Get() *Slots {
	return v.value
}

func (v *NullableSlots) Set(val *Slots) {
	v.value = val
	v.isSet = true
}

func (v NullableSlots) IsSet() bool {
	return v.isSet
}

func (v *NullableSlots) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlots(val *Slots) *NullableSlots {
	return &NullableSlots{value: val, isSet: true}
}

func (v NullableSlots) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlots) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


