/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CycloneDxTool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CycloneDxTool{}

// CycloneDxTool struct for CycloneDxTool
type CycloneDxTool struct {
	Name *string `json:"name,omitempty"`
	Vendor *string `json:"vendor,omitempty"`
}

// NewCycloneDxTool instantiates a new CycloneDxTool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCycloneDxTool() *CycloneDxTool {
	this := CycloneDxTool{}
	return &this
}

// NewCycloneDxToolWithDefaults instantiates a new CycloneDxTool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCycloneDxToolWithDefaults() *CycloneDxTool {
	this := CycloneDxTool{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CycloneDxTool) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CycloneDxTool) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CycloneDxTool) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CycloneDxTool) SetName(v string) {
	o.Name = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *CycloneDxTool) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CycloneDxTool) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *CycloneDxTool) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *CycloneDxTool) SetVendor(v string) {
	o.Vendor = &v
}

func (o CycloneDxTool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CycloneDxTool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	return toSerialize, nil
}

type NullableCycloneDxTool struct {
	value *CycloneDxTool
	isSet bool
}

func (v NullableCycloneDxTool) Get() *CycloneDxTool {
	return v.value
}

func (v *NullableCycloneDxTool) Set(val *CycloneDxTool) {
	v.value = val
	v.isSet = true
}

func (v NullableCycloneDxTool) IsSet() bool {
	return v.isSet
}

func (v *NullableCycloneDxTool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCycloneDxTool(val *CycloneDxTool) *NullableCycloneDxTool {
	return &NullableCycloneDxTool{value: val, isSet: true}
}

func (v NullableCycloneDxTool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCycloneDxTool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


