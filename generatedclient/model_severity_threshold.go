/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SeverityThreshold Minimum Snyk issue severity to send a notification for, messages will not be sent for any issue below this value
type SeverityThreshold string

// List of SeverityThreshold
const (
	LOW SeverityThreshold = "low"
	MEDIUM SeverityThreshold = "medium"
	HIGH SeverityThreshold = "high"
	CRITICAL SeverityThreshold = "critical"
)

// All allowed values of SeverityThreshold enum
var AllowedSeverityThresholdEnumValues = []SeverityThreshold{
	"low",
	"medium",
	"high",
	"critical",
}

func (v *SeverityThreshold) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SeverityThreshold(value)
	for _, existing := range AllowedSeverityThresholdEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SeverityThreshold", value)
}

// NewSeverityThresholdFromValue returns a pointer to a valid SeverityThreshold
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSeverityThresholdFromValue(v string) (*SeverityThreshold, error) {
	ev := SeverityThreshold(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SeverityThreshold: valid values are %v", v, AllowedSeverityThresholdEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SeverityThreshold) IsValid() bool {
	for _, existing := range AllowedSeverityThresholdEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SeverityThreshold value
func (v SeverityThreshold) Ptr() *SeverityThreshold {
	return &v
}

type NullableSeverityThreshold struct {
	value *SeverityThreshold
	isSet bool
}

func (v NullableSeverityThreshold) Get() *SeverityThreshold {
	return v.value
}

func (v *NullableSeverityThreshold) Set(val *SeverityThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableSeverityThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableSeverityThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeverityThreshold(val *SeverityThreshold) *NullableSeverityThreshold {
	return &NullableSeverityThreshold{value: val, isSet: true}
}

func (v NullableSeverityThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeverityThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

