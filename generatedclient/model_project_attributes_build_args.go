/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"bytes"
)

// ProjectAttributesBuildArgs - struct for ProjectAttributesBuildArgs
type ProjectAttributesBuildArgs struct {
	ContainerBuildArgs *ContainerBuildArgs
	NugetBuildArgs *NugetBuildArgs
	YarnBuildArgs *YarnBuildArgs
}

// ContainerBuildArgsAsProjectAttributesBuildArgs is a convenience function that returns ContainerBuildArgs wrapped in ProjectAttributesBuildArgs
func ContainerBuildArgsAsProjectAttributesBuildArgs(v *ContainerBuildArgs) ProjectAttributesBuildArgs {
	return ProjectAttributesBuildArgs{
		ContainerBuildArgs: v,
	}
}

// NugetBuildArgsAsProjectAttributesBuildArgs is a convenience function that returns NugetBuildArgs wrapped in ProjectAttributesBuildArgs
func NugetBuildArgsAsProjectAttributesBuildArgs(v *NugetBuildArgs) ProjectAttributesBuildArgs {
	return ProjectAttributesBuildArgs{
		NugetBuildArgs: v,
	}
}

// YarnBuildArgsAsProjectAttributesBuildArgs is a convenience function that returns YarnBuildArgs wrapped in ProjectAttributesBuildArgs
func YarnBuildArgsAsProjectAttributesBuildArgs(v *YarnBuildArgs) ProjectAttributesBuildArgs {
	return ProjectAttributesBuildArgs{
		YarnBuildArgs: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ProjectAttributesBuildArgs) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ContainerBuildArgs
	err = newStrictDecoder(data).Decode(&dst.ContainerBuildArgs)
	if err == nil {
		jsonContainerBuildArgs, _ := json.Marshal(dst.ContainerBuildArgs)
		if string(jsonContainerBuildArgs) == "{}" { // empty struct
			dst.ContainerBuildArgs = nil
		} else {
			match++
		}
	} else {
		dst.ContainerBuildArgs = nil
	}

	// try to unmarshal data into NugetBuildArgs
	err = newStrictDecoder(data).Decode(&dst.NugetBuildArgs)
	if err == nil {
		jsonNugetBuildArgs, _ := json.Marshal(dst.NugetBuildArgs)
		if string(jsonNugetBuildArgs) == "{}" { // empty struct
			dst.NugetBuildArgs = nil
		} else {
			match++
		}
	} else {
		dst.NugetBuildArgs = nil
	}

	// try to unmarshal data into YarnBuildArgs
	err = newStrictDecoder(data).Decode(&dst.YarnBuildArgs)
	if err == nil {
		jsonYarnBuildArgs, _ := json.Marshal(dst.YarnBuildArgs)
		if string(jsonYarnBuildArgs) == "{}" { // empty struct
			dst.YarnBuildArgs = nil
		} else {
			match++
		}
	} else {
		dst.YarnBuildArgs = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ContainerBuildArgs = nil
		dst.NugetBuildArgs = nil
		dst.YarnBuildArgs = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ProjectAttributesBuildArgs)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ProjectAttributesBuildArgs)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ProjectAttributesBuildArgs) MarshalJSON() ([]byte, error) {
	if src.ContainerBuildArgs != nil {
		return json.Marshal(&src.ContainerBuildArgs)
	}

	if src.NugetBuildArgs != nil {
		return json.Marshal(&src.NugetBuildArgs)
	}

	if src.YarnBuildArgs != nil {
		return json.Marshal(&src.YarnBuildArgs)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ProjectAttributesBuildArgs) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ContainerBuildArgs != nil {
		return obj.ContainerBuildArgs
	}

	if obj.NugetBuildArgs != nil {
		return obj.NugetBuildArgs
	}

	if obj.YarnBuildArgs != nil {
		return obj.YarnBuildArgs
	}

	// all schemas are nil
	return nil
}

type NullableProjectAttributesBuildArgs struct {
	value *ProjectAttributesBuildArgs
	isSet bool
}

func (v NullableProjectAttributesBuildArgs) Get() *ProjectAttributesBuildArgs {
	return v.value
}

func (v *NullableProjectAttributesBuildArgs) Set(val *ProjectAttributesBuildArgs) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectAttributesBuildArgs) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectAttributesBuildArgs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectAttributesBuildArgs(val *ProjectAttributesBuildArgs) *NullableProjectAttributesBuildArgs {
	return &NullableProjectAttributesBuildArgs{value: val, isSet: true}
}

func (v NullableProjectAttributesBuildArgs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectAttributesBuildArgs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


