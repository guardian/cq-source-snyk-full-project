/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrgInvitationRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrgInvitationRelationships{}

// OrgInvitationRelationships struct for OrgInvitationRelationships
type OrgInvitationRelationships struct {
	Org *Relationship `json:"org,omitempty"`
}

// NewOrgInvitationRelationships instantiates a new OrgInvitationRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgInvitationRelationships() *OrgInvitationRelationships {
	this := OrgInvitationRelationships{}
	return &this
}

// NewOrgInvitationRelationshipsWithDefaults instantiates a new OrgInvitationRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgInvitationRelationshipsWithDefaults() *OrgInvitationRelationships {
	this := OrgInvitationRelationships{}
	return &this
}

// GetOrg returns the Org field value if set, zero value otherwise.
func (o *OrgInvitationRelationships) GetOrg() Relationship {
	if o == nil || IsNil(o.Org) {
		var ret Relationship
		return ret
	}
	return *o.Org
}

// GetOrgOk returns a tuple with the Org field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgInvitationRelationships) GetOrgOk() (*Relationship, bool) {
	if o == nil || IsNil(o.Org) {
		return nil, false
	}
	return o.Org, true
}

// HasOrg returns a boolean if a field has been set.
func (o *OrgInvitationRelationships) HasOrg() bool {
	if o != nil && !IsNil(o.Org) {
		return true
	}

	return false
}

// SetOrg gets a reference to the given Relationship and assigns it to the Org field.
func (o *OrgInvitationRelationships) SetOrg(v Relationship) {
	o.Org = &v
}

func (o OrgInvitationRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrgInvitationRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Org) {
		toSerialize["org"] = o.Org
	}
	return toSerialize, nil
}

type NullableOrgInvitationRelationships struct {
	value *OrgInvitationRelationships
	isSet bool
}

func (v NullableOrgInvitationRelationships) Get() *OrgInvitationRelationships {
	return v.value
}

func (v *NullableOrgInvitationRelationships) Set(val *OrgInvitationRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgInvitationRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgInvitationRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgInvitationRelationships(val *OrgInvitationRelationships) *NullableOrgInvitationRelationships {
	return &NullableOrgInvitationRelationships{value: val, isSet: true}
}

func (v NullableOrgInvitationRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgInvitationRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


