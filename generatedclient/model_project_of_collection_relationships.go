/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProjectOfCollectionRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectOfCollectionRelationships{}

// ProjectOfCollectionRelationships struct for ProjectOfCollectionRelationships
type ProjectOfCollectionRelationships struct {
	Target ProjectOfCollectionRelationshipsTarget `json:"target"`
}

type _ProjectOfCollectionRelationships ProjectOfCollectionRelationships

// NewProjectOfCollectionRelationships instantiates a new ProjectOfCollectionRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectOfCollectionRelationships(target ProjectOfCollectionRelationshipsTarget) *ProjectOfCollectionRelationships {
	this := ProjectOfCollectionRelationships{}
	this.Target = target
	return &this
}

// NewProjectOfCollectionRelationshipsWithDefaults instantiates a new ProjectOfCollectionRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectOfCollectionRelationshipsWithDefaults() *ProjectOfCollectionRelationships {
	this := ProjectOfCollectionRelationships{}
	return &this
}

// GetTarget returns the Target field value
func (o *ProjectOfCollectionRelationships) GetTarget() ProjectOfCollectionRelationshipsTarget {
	if o == nil {
		var ret ProjectOfCollectionRelationshipsTarget
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *ProjectOfCollectionRelationships) GetTargetOk() (*ProjectOfCollectionRelationshipsTarget, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *ProjectOfCollectionRelationships) SetTarget(v ProjectOfCollectionRelationshipsTarget) {
	o.Target = v
}

func (o ProjectOfCollectionRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectOfCollectionRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["target"] = o.Target
	return toSerialize, nil
}

func (o *ProjectOfCollectionRelationships) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"target",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectOfCollectionRelationships := _ProjectOfCollectionRelationships{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectOfCollectionRelationships)

	if err != nil {
		return err
	}

	*o = ProjectOfCollectionRelationships(varProjectOfCollectionRelationships)

	return err
}

type NullableProjectOfCollectionRelationships struct {
	value *ProjectOfCollectionRelationships
	isSet bool
}

func (v NullableProjectOfCollectionRelationships) Get() *ProjectOfCollectionRelationships {
	return v.value
}

func (v *NullableProjectOfCollectionRelationships) Set(val *ProjectOfCollectionRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectOfCollectionRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectOfCollectionRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectOfCollectionRelationships(val *ProjectOfCollectionRelationships) *NullableProjectOfCollectionRelationships {
	return &NullableProjectOfCollectionRelationships{value: val, isSet: true}
}

func (v NullableProjectOfCollectionRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectOfCollectionRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


