/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PatchProjectRequestDataRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchProjectRequestDataRelationships{}

// PatchProjectRequestDataRelationships struct for PatchProjectRequestDataRelationships
type PatchProjectRequestDataRelationships struct {
	Owner *PatchProjectRequestDataRelationshipsOwner `json:"owner,omitempty"`
}

// NewPatchProjectRequestDataRelationships instantiates a new PatchProjectRequestDataRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchProjectRequestDataRelationships() *PatchProjectRequestDataRelationships {
	this := PatchProjectRequestDataRelationships{}
	return &this
}

// NewPatchProjectRequestDataRelationshipsWithDefaults instantiates a new PatchProjectRequestDataRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchProjectRequestDataRelationshipsWithDefaults() *PatchProjectRequestDataRelationships {
	this := PatchProjectRequestDataRelationships{}
	return &this
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *PatchProjectRequestDataRelationships) GetOwner() PatchProjectRequestDataRelationshipsOwner {
	if o == nil || IsNil(o.Owner) {
		var ret PatchProjectRequestDataRelationshipsOwner
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchProjectRequestDataRelationships) GetOwnerOk() (*PatchProjectRequestDataRelationshipsOwner, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *PatchProjectRequestDataRelationships) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given PatchProjectRequestDataRelationshipsOwner and assigns it to the Owner field.
func (o *PatchProjectRequestDataRelationships) SetOwner(v PatchProjectRequestDataRelationshipsOwner) {
	o.Owner = &v
}

func (o PatchProjectRequestDataRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchProjectRequestDataRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	return toSerialize, nil
}

type NullablePatchProjectRequestDataRelationships struct {
	value *PatchProjectRequestDataRelationships
	isSet bool
}

func (v NullablePatchProjectRequestDataRelationships) Get() *PatchProjectRequestDataRelationships {
	return v.value
}

func (v *NullablePatchProjectRequestDataRelationships) Set(val *PatchProjectRequestDataRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchProjectRequestDataRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchProjectRequestDataRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchProjectRequestDataRelationships(val *PatchProjectRequestDataRelationships) *NullablePatchProjectRequestDataRelationships {
	return &NullablePatchProjectRequestDataRelationships{value: val, isSet: true}
}

func (v NullablePatchProjectRequestDataRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchProjectRequestDataRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


