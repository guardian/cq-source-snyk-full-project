/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PullRequestsSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PullRequestsSettings{}

// PullRequestsSettings Settings which describe how pull requests for a project are tested.
type PullRequestsSettings struct {
	// Only fail when the issues found have a fix available.
	FailOnlyForIssuesWithFix *bool `json:"fail_only_for_issues_with_fix,omitempty"`
	// Fail if the project has any issues (\"all\"), or fail if a PR is introducing a new dependency with issues (\"only_new\"). If this value is unset, the setting is inherited from the org default.
	Policy *string `json:"policy,omitempty"`
	// Only fail for issues greater than or equal to the specified severity. If this value is unset, the setting is inherited from the org default.
	SeverityThreshold *string `json:"severity_threshold,omitempty"`
}

// NewPullRequestsSettings instantiates a new PullRequestsSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPullRequestsSettings() *PullRequestsSettings {
	this := PullRequestsSettings{}
	return &this
}

// NewPullRequestsSettingsWithDefaults instantiates a new PullRequestsSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPullRequestsSettingsWithDefaults() *PullRequestsSettings {
	this := PullRequestsSettings{}
	return &this
}

// GetFailOnlyForIssuesWithFix returns the FailOnlyForIssuesWithFix field value if set, zero value otherwise.
func (o *PullRequestsSettings) GetFailOnlyForIssuesWithFix() bool {
	if o == nil || IsNil(o.FailOnlyForIssuesWithFix) {
		var ret bool
		return ret
	}
	return *o.FailOnlyForIssuesWithFix
}

// GetFailOnlyForIssuesWithFixOk returns a tuple with the FailOnlyForIssuesWithFix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequestsSettings) GetFailOnlyForIssuesWithFixOk() (*bool, bool) {
	if o == nil || IsNil(o.FailOnlyForIssuesWithFix) {
		return nil, false
	}
	return o.FailOnlyForIssuesWithFix, true
}

// HasFailOnlyForIssuesWithFix returns a boolean if a field has been set.
func (o *PullRequestsSettings) HasFailOnlyForIssuesWithFix() bool {
	if o != nil && !IsNil(o.FailOnlyForIssuesWithFix) {
		return true
	}

	return false
}

// SetFailOnlyForIssuesWithFix gets a reference to the given bool and assigns it to the FailOnlyForIssuesWithFix field.
func (o *PullRequestsSettings) SetFailOnlyForIssuesWithFix(v bool) {
	o.FailOnlyForIssuesWithFix = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *PullRequestsSettings) GetPolicy() string {
	if o == nil || IsNil(o.Policy) {
		var ret string
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequestsSettings) GetPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *PullRequestsSettings) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given string and assigns it to the Policy field.
func (o *PullRequestsSettings) SetPolicy(v string) {
	o.Policy = &v
}

// GetSeverityThreshold returns the SeverityThreshold field value if set, zero value otherwise.
func (o *PullRequestsSettings) GetSeverityThreshold() string {
	if o == nil || IsNil(o.SeverityThreshold) {
		var ret string
		return ret
	}
	return *o.SeverityThreshold
}

// GetSeverityThresholdOk returns a tuple with the SeverityThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequestsSettings) GetSeverityThresholdOk() (*string, bool) {
	if o == nil || IsNil(o.SeverityThreshold) {
		return nil, false
	}
	return o.SeverityThreshold, true
}

// HasSeverityThreshold returns a boolean if a field has been set.
func (o *PullRequestsSettings) HasSeverityThreshold() bool {
	if o != nil && !IsNil(o.SeverityThreshold) {
		return true
	}

	return false
}

// SetSeverityThreshold gets a reference to the given string and assigns it to the SeverityThreshold field.
func (o *PullRequestsSettings) SetSeverityThreshold(v string) {
	o.SeverityThreshold = &v
}

func (o PullRequestsSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PullRequestsSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FailOnlyForIssuesWithFix) {
		toSerialize["fail_only_for_issues_with_fix"] = o.FailOnlyForIssuesWithFix
	}
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	if !IsNil(o.SeverityThreshold) {
		toSerialize["severity_threshold"] = o.SeverityThreshold
	}
	return toSerialize, nil
}

type NullablePullRequestsSettings struct {
	value *PullRequestsSettings
	isSet bool
}

func (v NullablePullRequestsSettings) Get() *PullRequestsSettings {
	return v.value
}

func (v *NullablePullRequestsSettings) Set(val *PullRequestsSettings) {
	v.value = val
	v.isSet = true
}

func (v NullablePullRequestsSettings) IsSet() bool {
	return v.isSet
}

func (v *NullablePullRequestsSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePullRequestsSettings(val *PullRequestsSettings) *NullablePullRequestsSettings {
	return &NullablePullRequestsSettings{value: val, isSet: true}
}

func (v NullablePullRequestsSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePullRequestsSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


