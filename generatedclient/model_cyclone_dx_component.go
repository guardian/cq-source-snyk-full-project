/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CycloneDxComponent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CycloneDxComponent{}

// CycloneDxComponent struct for CycloneDxComponent
type CycloneDxComponent struct {
	BomRef *string `json:"bom-ref,omitempty"`
	Name *string `json:"name,omitempty"`
	Purl *string `json:"purl,omitempty"`
	Type *string `json:"type,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewCycloneDxComponent instantiates a new CycloneDxComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCycloneDxComponent() *CycloneDxComponent {
	this := CycloneDxComponent{}
	return &this
}

// NewCycloneDxComponentWithDefaults instantiates a new CycloneDxComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCycloneDxComponentWithDefaults() *CycloneDxComponent {
	this := CycloneDxComponent{}
	return &this
}

// GetBomRef returns the BomRef field value if set, zero value otherwise.
func (o *CycloneDxComponent) GetBomRef() string {
	if o == nil || IsNil(o.BomRef) {
		var ret string
		return ret
	}
	return *o.BomRef
}

// GetBomRefOk returns a tuple with the BomRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CycloneDxComponent) GetBomRefOk() (*string, bool) {
	if o == nil || IsNil(o.BomRef) {
		return nil, false
	}
	return o.BomRef, true
}

// HasBomRef returns a boolean if a field has been set.
func (o *CycloneDxComponent) HasBomRef() bool {
	if o != nil && !IsNil(o.BomRef) {
		return true
	}

	return false
}

// SetBomRef gets a reference to the given string and assigns it to the BomRef field.
func (o *CycloneDxComponent) SetBomRef(v string) {
	o.BomRef = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CycloneDxComponent) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CycloneDxComponent) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CycloneDxComponent) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CycloneDxComponent) SetName(v string) {
	o.Name = &v
}

// GetPurl returns the Purl field value if set, zero value otherwise.
func (o *CycloneDxComponent) GetPurl() string {
	if o == nil || IsNil(o.Purl) {
		var ret string
		return ret
	}
	return *o.Purl
}

// GetPurlOk returns a tuple with the Purl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CycloneDxComponent) GetPurlOk() (*string, bool) {
	if o == nil || IsNil(o.Purl) {
		return nil, false
	}
	return o.Purl, true
}

// HasPurl returns a boolean if a field has been set.
func (o *CycloneDxComponent) HasPurl() bool {
	if o != nil && !IsNil(o.Purl) {
		return true
	}

	return false
}

// SetPurl gets a reference to the given string and assigns it to the Purl field.
func (o *CycloneDxComponent) SetPurl(v string) {
	o.Purl = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CycloneDxComponent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CycloneDxComponent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CycloneDxComponent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CycloneDxComponent) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CycloneDxComponent) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CycloneDxComponent) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CycloneDxComponent) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *CycloneDxComponent) SetVersion(v string) {
	o.Version = &v
}

func (o CycloneDxComponent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CycloneDxComponent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BomRef) {
		toSerialize["bom-ref"] = o.BomRef
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Purl) {
		toSerialize["purl"] = o.Purl
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableCycloneDxComponent struct {
	value *CycloneDxComponent
	isSet bool
}

func (v NullableCycloneDxComponent) Get() *CycloneDxComponent {
	return v.value
}

func (v *NullableCycloneDxComponent) Set(val *CycloneDxComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableCycloneDxComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableCycloneDxComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCycloneDxComponent(val *CycloneDxComponent) *NullableCycloneDxComponent {
	return &NullableCycloneDxComponent{value: val, isSet: true}
}

func (v NullableCycloneDxComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCycloneDxComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


