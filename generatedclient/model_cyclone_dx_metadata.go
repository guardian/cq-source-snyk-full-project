/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CycloneDxMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CycloneDxMetadata{}

// CycloneDxMetadata struct for CycloneDxMetadata
type CycloneDxMetadata struct {
	Component *CycloneDxComponent `json:"component,omitempty"`
	Properties []CycloneDxProperty `json:"properties,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	Tools []CycloneDxTool `json:"tools,omitempty"`
}

// NewCycloneDxMetadata instantiates a new CycloneDxMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCycloneDxMetadata() *CycloneDxMetadata {
	this := CycloneDxMetadata{}
	return &this
}

// NewCycloneDxMetadataWithDefaults instantiates a new CycloneDxMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCycloneDxMetadataWithDefaults() *CycloneDxMetadata {
	this := CycloneDxMetadata{}
	return &this
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *CycloneDxMetadata) GetComponent() CycloneDxComponent {
	if o == nil || IsNil(o.Component) {
		var ret CycloneDxComponent
		return ret
	}
	return *o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CycloneDxMetadata) GetComponentOk() (*CycloneDxComponent, bool) {
	if o == nil || IsNil(o.Component) {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *CycloneDxMetadata) HasComponent() bool {
	if o != nil && !IsNil(o.Component) {
		return true
	}

	return false
}

// SetComponent gets a reference to the given CycloneDxComponent and assigns it to the Component field.
func (o *CycloneDxMetadata) SetComponent(v CycloneDxComponent) {
	o.Component = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *CycloneDxMetadata) GetProperties() []CycloneDxProperty {
	if o == nil || IsNil(o.Properties) {
		var ret []CycloneDxProperty
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CycloneDxMetadata) GetPropertiesOk() ([]CycloneDxProperty, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *CycloneDxMetadata) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []CycloneDxProperty and assigns it to the Properties field.
func (o *CycloneDxMetadata) SetProperties(v []CycloneDxProperty) {
	o.Properties = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *CycloneDxMetadata) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CycloneDxMetadata) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CycloneDxMetadata) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *CycloneDxMetadata) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetTools returns the Tools field value if set, zero value otherwise.
func (o *CycloneDxMetadata) GetTools() []CycloneDxTool {
	if o == nil || IsNil(o.Tools) {
		var ret []CycloneDxTool
		return ret
	}
	return o.Tools
}

// GetToolsOk returns a tuple with the Tools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CycloneDxMetadata) GetToolsOk() ([]CycloneDxTool, bool) {
	if o == nil || IsNil(o.Tools) {
		return nil, false
	}
	return o.Tools, true
}

// HasTools returns a boolean if a field has been set.
func (o *CycloneDxMetadata) HasTools() bool {
	if o != nil && !IsNil(o.Tools) {
		return true
	}

	return false
}

// SetTools gets a reference to the given []CycloneDxTool and assigns it to the Tools field.
func (o *CycloneDxMetadata) SetTools(v []CycloneDxTool) {
	o.Tools = v
}

func (o CycloneDxMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CycloneDxMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Component) {
		toSerialize["component"] = o.Component
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Tools) {
		toSerialize["tools"] = o.Tools
	}
	return toSerialize, nil
}

type NullableCycloneDxMetadata struct {
	value *CycloneDxMetadata
	isSet bool
}

func (v NullableCycloneDxMetadata) Get() *CycloneDxMetadata {
	return v.value
}

func (v *NullableCycloneDxMetadata) Set(val *CycloneDxMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableCycloneDxMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableCycloneDxMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCycloneDxMetadata(val *CycloneDxMetadata) *NullableCycloneDxMetadata {
	return &NullableCycloneDxMetadata{value: val, isSet: true}
}

func (v NullableCycloneDxMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCycloneDxMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


