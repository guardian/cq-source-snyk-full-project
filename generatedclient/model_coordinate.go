/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Coordinate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Coordinate{}

// Coordinate struct for Coordinate
type Coordinate struct {
	Remedies []Remedy `json:"remedies,omitempty"`
	// The affected versions of this vulnerability.
	Representation []string `json:"representation,omitempty"`
}

// NewCoordinate instantiates a new Coordinate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoordinate() *Coordinate {
	this := Coordinate{}
	return &this
}

// NewCoordinateWithDefaults instantiates a new Coordinate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoordinateWithDefaults() *Coordinate {
	this := Coordinate{}
	return &this
}

// GetRemedies returns the Remedies field value if set, zero value otherwise.
func (o *Coordinate) GetRemedies() []Remedy {
	if o == nil || IsNil(o.Remedies) {
		var ret []Remedy
		return ret
	}
	return o.Remedies
}

// GetRemediesOk returns a tuple with the Remedies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coordinate) GetRemediesOk() ([]Remedy, bool) {
	if o == nil || IsNil(o.Remedies) {
		return nil, false
	}
	return o.Remedies, true
}

// HasRemedies returns a boolean if a field has been set.
func (o *Coordinate) HasRemedies() bool {
	if o != nil && !IsNil(o.Remedies) {
		return true
	}

	return false
}

// SetRemedies gets a reference to the given []Remedy and assigns it to the Remedies field.
func (o *Coordinate) SetRemedies(v []Remedy) {
	o.Remedies = v
}

// GetRepresentation returns the Representation field value if set, zero value otherwise.
func (o *Coordinate) GetRepresentation() []string {
	if o == nil || IsNil(o.Representation) {
		var ret []string
		return ret
	}
	return o.Representation
}

// GetRepresentationOk returns a tuple with the Representation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coordinate) GetRepresentationOk() ([]string, bool) {
	if o == nil || IsNil(o.Representation) {
		return nil, false
	}
	return o.Representation, true
}

// HasRepresentation returns a boolean if a field has been set.
func (o *Coordinate) HasRepresentation() bool {
	if o != nil && !IsNil(o.Representation) {
		return true
	}

	return false
}

// SetRepresentation gets a reference to the given []string and assigns it to the Representation field.
func (o *Coordinate) SetRepresentation(v []string) {
	o.Representation = v
}

func (o Coordinate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Coordinate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Remedies) {
		toSerialize["remedies"] = o.Remedies
	}
	if !IsNil(o.Representation) {
		toSerialize["representation"] = o.Representation
	}
	return toSerialize, nil
}

type NullableCoordinate struct {
	value *Coordinate
	isSet bool
}

func (v NullableCoordinate) Get() *Coordinate {
	return v.value
}

func (v *NullableCoordinate) Set(val *Coordinate) {
	v.value = val
	v.isSet = true
}

func (v NullableCoordinate) IsSet() bool {
	return v.isSet
}

func (v *NullableCoordinate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoordinate(val *Coordinate) *NullableCoordinate {
	return &NullableCoordinate{value: val, isSet: true}
}

func (v NullableCoordinate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoordinate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


