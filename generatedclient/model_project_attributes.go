/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ProjectAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectAttributes{}

// ProjectAttributes struct for ProjectAttributes
type ProjectAttributes struct {
	BuildArgs *ProjectAttributesBuildArgs `json:"build_args,omitempty"`
	BusinessCriticality []string `json:"business_criticality,omitempty"`
	// The date that the project was created on
	Created time.Time `json:"created"`
	Environment []string `json:"environment,omitempty"`
	Lifecycle []string `json:"lifecycle,omitempty"`
	// Project name.
	Name string `json:"name"`
	// The origin the project was added from.
	Origin string `json:"origin"`
	// Whether the project is read-only
	ReadOnly bool `json:"read_only"`
	Settings ProjectSettings `json:"settings"`
	// Describes if a project is currently monitored or it is de-activated.
	Status string `json:"status"`
	Tags []PatchProjectRequestDataAttributesTagsInner `json:"tags,omitempty"`
	// Path within the target to identify a specific file/directory/image etc. when scanning just part  of the target, and not the entity.
	TargetFile string `json:"target_file"`
	// The additional information required to resolve which revision of the resource should be scanned.
	TargetReference string `json:"target_reference"`
	// Dotnet Target, for relevant projects
	TargetRuntime *string `json:"target_runtime,omitempty"`
	// The package manager of the project.
	Type string `json:"type"`
}

type _ProjectAttributes ProjectAttributes

// NewProjectAttributes instantiates a new ProjectAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectAttributes(created time.Time, name string, origin string, readOnly bool, settings ProjectSettings, status string, targetFile string, targetReference string, type_ string) *ProjectAttributes {
	this := ProjectAttributes{}
	this.Created = created
	this.Name = name
	this.Origin = origin
	this.ReadOnly = readOnly
	this.Settings = settings
	this.Status = status
	this.TargetFile = targetFile
	this.TargetReference = targetReference
	this.Type = type_
	return &this
}

// NewProjectAttributesWithDefaults instantiates a new ProjectAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectAttributesWithDefaults() *ProjectAttributes {
	this := ProjectAttributes{}
	return &this
}

// GetBuildArgs returns the BuildArgs field value if set, zero value otherwise.
func (o *ProjectAttributes) GetBuildArgs() ProjectAttributesBuildArgs {
	if o == nil || IsNil(o.BuildArgs) {
		var ret ProjectAttributesBuildArgs
		return ret
	}
	return *o.BuildArgs
}

// GetBuildArgsOk returns a tuple with the BuildArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAttributes) GetBuildArgsOk() (*ProjectAttributesBuildArgs, bool) {
	if o == nil || IsNil(o.BuildArgs) {
		return nil, false
	}
	return o.BuildArgs, true
}

// HasBuildArgs returns a boolean if a field has been set.
func (o *ProjectAttributes) HasBuildArgs() bool {
	if o != nil && !IsNil(o.BuildArgs) {
		return true
	}

	return false
}

// SetBuildArgs gets a reference to the given ProjectAttributesBuildArgs and assigns it to the BuildArgs field.
func (o *ProjectAttributes) SetBuildArgs(v ProjectAttributesBuildArgs) {
	o.BuildArgs = &v
}

// GetBusinessCriticality returns the BusinessCriticality field value if set, zero value otherwise.
func (o *ProjectAttributes) GetBusinessCriticality() []string {
	if o == nil || IsNil(o.BusinessCriticality) {
		var ret []string
		return ret
	}
	return o.BusinessCriticality
}

// GetBusinessCriticalityOk returns a tuple with the BusinessCriticality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAttributes) GetBusinessCriticalityOk() ([]string, bool) {
	if o == nil || IsNil(o.BusinessCriticality) {
		return nil, false
	}
	return o.BusinessCriticality, true
}

// HasBusinessCriticality returns a boolean if a field has been set.
func (o *ProjectAttributes) HasBusinessCriticality() bool {
	if o != nil && !IsNil(o.BusinessCriticality) {
		return true
	}

	return false
}

// SetBusinessCriticality gets a reference to the given []string and assigns it to the BusinessCriticality field.
func (o *ProjectAttributes) SetBusinessCriticality(v []string) {
	o.BusinessCriticality = v
}

// GetCreated returns the Created field value
func (o *ProjectAttributes) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *ProjectAttributes) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *ProjectAttributes) SetCreated(v time.Time) {
	o.Created = v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *ProjectAttributes) GetEnvironment() []string {
	if o == nil || IsNil(o.Environment) {
		var ret []string
		return ret
	}
	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAttributes) GetEnvironmentOk() ([]string, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *ProjectAttributes) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given []string and assigns it to the Environment field.
func (o *ProjectAttributes) SetEnvironment(v []string) {
	o.Environment = v
}

// GetLifecycle returns the Lifecycle field value if set, zero value otherwise.
func (o *ProjectAttributes) GetLifecycle() []string {
	if o == nil || IsNil(o.Lifecycle) {
		var ret []string
		return ret
	}
	return o.Lifecycle
}

// GetLifecycleOk returns a tuple with the Lifecycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAttributes) GetLifecycleOk() ([]string, bool) {
	if o == nil || IsNil(o.Lifecycle) {
		return nil, false
	}
	return o.Lifecycle, true
}

// HasLifecycle returns a boolean if a field has been set.
func (o *ProjectAttributes) HasLifecycle() bool {
	if o != nil && !IsNil(o.Lifecycle) {
		return true
	}

	return false
}

// SetLifecycle gets a reference to the given []string and assigns it to the Lifecycle field.
func (o *ProjectAttributes) SetLifecycle(v []string) {
	o.Lifecycle = v
}

// GetName returns the Name field value
func (o *ProjectAttributes) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectAttributes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectAttributes) SetName(v string) {
	o.Name = v
}

// GetOrigin returns the Origin field value
func (o *ProjectAttributes) GetOrigin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *ProjectAttributes) GetOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *ProjectAttributes) SetOrigin(v string) {
	o.Origin = v
}

// GetReadOnly returns the ReadOnly field value
func (o *ProjectAttributes) GetReadOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value
// and a boolean to check if the value has been set.
func (o *ProjectAttributes) GetReadOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReadOnly, true
}

// SetReadOnly sets field value
func (o *ProjectAttributes) SetReadOnly(v bool) {
	o.ReadOnly = v
}

// GetSettings returns the Settings field value
func (o *ProjectAttributes) GetSettings() ProjectSettings {
	if o == nil {
		var ret ProjectSettings
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *ProjectAttributes) GetSettingsOk() (*ProjectSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Settings, true
}

// SetSettings sets field value
func (o *ProjectAttributes) SetSettings(v ProjectSettings) {
	o.Settings = v
}

// GetStatus returns the Status field value
func (o *ProjectAttributes) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ProjectAttributes) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ProjectAttributes) SetStatus(v string) {
	o.Status = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ProjectAttributes) GetTags() []PatchProjectRequestDataAttributesTagsInner {
	if o == nil || IsNil(o.Tags) {
		var ret []PatchProjectRequestDataAttributesTagsInner
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAttributes) GetTagsOk() ([]PatchProjectRequestDataAttributesTagsInner, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ProjectAttributes) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []PatchProjectRequestDataAttributesTagsInner and assigns it to the Tags field.
func (o *ProjectAttributes) SetTags(v []PatchProjectRequestDataAttributesTagsInner) {
	o.Tags = v
}

// GetTargetFile returns the TargetFile field value
func (o *ProjectAttributes) GetTargetFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetFile
}

// GetTargetFileOk returns a tuple with the TargetFile field value
// and a boolean to check if the value has been set.
func (o *ProjectAttributes) GetTargetFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetFile, true
}

// SetTargetFile sets field value
func (o *ProjectAttributes) SetTargetFile(v string) {
	o.TargetFile = v
}

// GetTargetReference returns the TargetReference field value
func (o *ProjectAttributes) GetTargetReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetReference
}

// GetTargetReferenceOk returns a tuple with the TargetReference field value
// and a boolean to check if the value has been set.
func (o *ProjectAttributes) GetTargetReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetReference, true
}

// SetTargetReference sets field value
func (o *ProjectAttributes) SetTargetReference(v string) {
	o.TargetReference = v
}

// GetTargetRuntime returns the TargetRuntime field value if set, zero value otherwise.
func (o *ProjectAttributes) GetTargetRuntime() string {
	if o == nil || IsNil(o.TargetRuntime) {
		var ret string
		return ret
	}
	return *o.TargetRuntime
}

// GetTargetRuntimeOk returns a tuple with the TargetRuntime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAttributes) GetTargetRuntimeOk() (*string, bool) {
	if o == nil || IsNil(o.TargetRuntime) {
		return nil, false
	}
	return o.TargetRuntime, true
}

// HasTargetRuntime returns a boolean if a field has been set.
func (o *ProjectAttributes) HasTargetRuntime() bool {
	if o != nil && !IsNil(o.TargetRuntime) {
		return true
	}

	return false
}

// SetTargetRuntime gets a reference to the given string and assigns it to the TargetRuntime field.
func (o *ProjectAttributes) SetTargetRuntime(v string) {
	o.TargetRuntime = &v
}

// GetType returns the Type field value
func (o *ProjectAttributes) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProjectAttributes) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProjectAttributes) SetType(v string) {
	o.Type = v
}

func (o ProjectAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuildArgs) {
		toSerialize["build_args"] = o.BuildArgs
	}
	if !IsNil(o.BusinessCriticality) {
		toSerialize["business_criticality"] = o.BusinessCriticality
	}
	toSerialize["created"] = o.Created
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Lifecycle) {
		toSerialize["lifecycle"] = o.Lifecycle
	}
	toSerialize["name"] = o.Name
	toSerialize["origin"] = o.Origin
	toSerialize["read_only"] = o.ReadOnly
	toSerialize["settings"] = o.Settings
	toSerialize["status"] = o.Status
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["target_file"] = o.TargetFile
	toSerialize["target_reference"] = o.TargetReference
	if !IsNil(o.TargetRuntime) {
		toSerialize["target_runtime"] = o.TargetRuntime
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ProjectAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created",
		"name",
		"origin",
		"read_only",
		"settings",
		"status",
		"target_file",
		"target_reference",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectAttributes := _ProjectAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectAttributes)

	if err != nil {
		return err
	}

	*o = ProjectAttributes(varProjectAttributes)

	return err
}

type NullableProjectAttributes struct {
	value *ProjectAttributes
	isSet bool
}

func (v NullableProjectAttributes) Get() *ProjectAttributes {
	return v.value
}

func (v *NullableProjectAttributes) Set(val *ProjectAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectAttributes(val *ProjectAttributes) *NullableProjectAttributes {
	return &NullableProjectAttributes{value: val, isSet: true}
}

func (v NullableProjectAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


