/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CycloneDxDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CycloneDxDocument{}

// CycloneDxDocument struct for CycloneDxDocument
type CycloneDxDocument struct {
	BomFormat string `json:"bomFormat"`
	// A list of included software components
	Components []CycloneDxComponent `json:"components,omitempty"`
	Dependencies []CycloneDxDependency `json:"dependencies"`
	Metadata CycloneDxMetadata `json:"metadata"`
	SpecVersion string `json:"specVersion"`
	Version int32 `json:"version"`
}

type _CycloneDxDocument CycloneDxDocument

// NewCycloneDxDocument instantiates a new CycloneDxDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCycloneDxDocument(bomFormat string, dependencies []CycloneDxDependency, metadata CycloneDxMetadata, specVersion string, version int32) *CycloneDxDocument {
	this := CycloneDxDocument{}
	this.BomFormat = bomFormat
	this.Dependencies = dependencies
	this.Metadata = metadata
	this.SpecVersion = specVersion
	this.Version = version
	return &this
}

// NewCycloneDxDocumentWithDefaults instantiates a new CycloneDxDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCycloneDxDocumentWithDefaults() *CycloneDxDocument {
	this := CycloneDxDocument{}
	return &this
}

// GetBomFormat returns the BomFormat field value
func (o *CycloneDxDocument) GetBomFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BomFormat
}

// GetBomFormatOk returns a tuple with the BomFormat field value
// and a boolean to check if the value has been set.
func (o *CycloneDxDocument) GetBomFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BomFormat, true
}

// SetBomFormat sets field value
func (o *CycloneDxDocument) SetBomFormat(v string) {
	o.BomFormat = v
}

// GetComponents returns the Components field value if set, zero value otherwise.
func (o *CycloneDxDocument) GetComponents() []CycloneDxComponent {
	if o == nil || IsNil(o.Components) {
		var ret []CycloneDxComponent
		return ret
	}
	return o.Components
}

// GetComponentsOk returns a tuple with the Components field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CycloneDxDocument) GetComponentsOk() ([]CycloneDxComponent, bool) {
	if o == nil || IsNil(o.Components) {
		return nil, false
	}
	return o.Components, true
}

// HasComponents returns a boolean if a field has been set.
func (o *CycloneDxDocument) HasComponents() bool {
	if o != nil && !IsNil(o.Components) {
		return true
	}

	return false
}

// SetComponents gets a reference to the given []CycloneDxComponent and assigns it to the Components field.
func (o *CycloneDxDocument) SetComponents(v []CycloneDxComponent) {
	o.Components = v
}

// GetDependencies returns the Dependencies field value
func (o *CycloneDxDocument) GetDependencies() []CycloneDxDependency {
	if o == nil {
		var ret []CycloneDxDependency
		return ret
	}

	return o.Dependencies
}

// GetDependenciesOk returns a tuple with the Dependencies field value
// and a boolean to check if the value has been set.
func (o *CycloneDxDocument) GetDependenciesOk() ([]CycloneDxDependency, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dependencies, true
}

// SetDependencies sets field value
func (o *CycloneDxDocument) SetDependencies(v []CycloneDxDependency) {
	o.Dependencies = v
}

// GetMetadata returns the Metadata field value
func (o *CycloneDxDocument) GetMetadata() CycloneDxMetadata {
	if o == nil {
		var ret CycloneDxMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *CycloneDxDocument) GetMetadataOk() (*CycloneDxMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *CycloneDxDocument) SetMetadata(v CycloneDxMetadata) {
	o.Metadata = v
}

// GetSpecVersion returns the SpecVersion field value
func (o *CycloneDxDocument) GetSpecVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpecVersion
}

// GetSpecVersionOk returns a tuple with the SpecVersion field value
// and a boolean to check if the value has been set.
func (o *CycloneDxDocument) GetSpecVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpecVersion, true
}

// SetSpecVersion sets field value
func (o *CycloneDxDocument) SetSpecVersion(v string) {
	o.SpecVersion = v
}

// GetVersion returns the Version field value
func (o *CycloneDxDocument) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *CycloneDxDocument) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *CycloneDxDocument) SetVersion(v int32) {
	o.Version = v
}

func (o CycloneDxDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CycloneDxDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bomFormat"] = o.BomFormat
	if !IsNil(o.Components) {
		toSerialize["components"] = o.Components
	}
	toSerialize["dependencies"] = o.Dependencies
	toSerialize["metadata"] = o.Metadata
	toSerialize["specVersion"] = o.SpecVersion
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *CycloneDxDocument) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bomFormat",
		"dependencies",
		"metadata",
		"specVersion",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCycloneDxDocument := _CycloneDxDocument{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCycloneDxDocument)

	if err != nil {
		return err
	}

	*o = CycloneDxDocument(varCycloneDxDocument)

	return err
}

type NullableCycloneDxDocument struct {
	value *CycloneDxDocument
	isSet bool
}

func (v NullableCycloneDxDocument) Get() *CycloneDxDocument {
	return v.value
}

func (v *NullableCycloneDxDocument) Set(val *CycloneDxDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableCycloneDxDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableCycloneDxDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCycloneDxDocument(val *CycloneDxDocument) *NullableCycloneDxDocument {
	return &NullableCycloneDxDocument{value: val, isSet: true}
}

func (v NullableCycloneDxDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCycloneDxDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


