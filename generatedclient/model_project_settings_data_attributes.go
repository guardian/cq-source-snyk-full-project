/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProjectSettingsDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectSettingsDataAttributes{}

// ProjectSettingsDataAttributes struct for ProjectSettingsDataAttributes
type ProjectSettingsDataAttributes struct {
	// Current status of the project settings.
	IsActive bool `json:"is_active"`
	SeverityThreshold SeverityThreshold `json:"severity_threshold"`
	TargetChannelId string `json:"target_channel_id"`
	TargetChannelName string `json:"target_channel_name"`
	// The target file name for the project.
	TargetProjectName string `json:"target_project_name"`
}

type _ProjectSettingsDataAttributes ProjectSettingsDataAttributes

// NewProjectSettingsDataAttributes instantiates a new ProjectSettingsDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectSettingsDataAttributes(isActive bool, severityThreshold SeverityThreshold, targetChannelId string, targetChannelName string, targetProjectName string) *ProjectSettingsDataAttributes {
	this := ProjectSettingsDataAttributes{}
	this.IsActive = isActive
	this.SeverityThreshold = severityThreshold
	this.TargetChannelId = targetChannelId
	this.TargetChannelName = targetChannelName
	this.TargetProjectName = targetProjectName
	return &this
}

// NewProjectSettingsDataAttributesWithDefaults instantiates a new ProjectSettingsDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectSettingsDataAttributesWithDefaults() *ProjectSettingsDataAttributes {
	this := ProjectSettingsDataAttributes{}
	return &this
}

// GetIsActive returns the IsActive field value
func (o *ProjectSettingsDataAttributes) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *ProjectSettingsDataAttributes) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *ProjectSettingsDataAttributes) SetIsActive(v bool) {
	o.IsActive = v
}

// GetSeverityThreshold returns the SeverityThreshold field value
func (o *ProjectSettingsDataAttributes) GetSeverityThreshold() SeverityThreshold {
	if o == nil {
		var ret SeverityThreshold
		return ret
	}

	return o.SeverityThreshold
}

// GetSeverityThresholdOk returns a tuple with the SeverityThreshold field value
// and a boolean to check if the value has been set.
func (o *ProjectSettingsDataAttributes) GetSeverityThresholdOk() (*SeverityThreshold, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeverityThreshold, true
}

// SetSeverityThreshold sets field value
func (o *ProjectSettingsDataAttributes) SetSeverityThreshold(v SeverityThreshold) {
	o.SeverityThreshold = v
}

// GetTargetChannelId returns the TargetChannelId field value
func (o *ProjectSettingsDataAttributes) GetTargetChannelId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetChannelId
}

// GetTargetChannelIdOk returns a tuple with the TargetChannelId field value
// and a boolean to check if the value has been set.
func (o *ProjectSettingsDataAttributes) GetTargetChannelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetChannelId, true
}

// SetTargetChannelId sets field value
func (o *ProjectSettingsDataAttributes) SetTargetChannelId(v string) {
	o.TargetChannelId = v
}

// GetTargetChannelName returns the TargetChannelName field value
func (o *ProjectSettingsDataAttributes) GetTargetChannelName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetChannelName
}

// GetTargetChannelNameOk returns a tuple with the TargetChannelName field value
// and a boolean to check if the value has been set.
func (o *ProjectSettingsDataAttributes) GetTargetChannelNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetChannelName, true
}

// SetTargetChannelName sets field value
func (o *ProjectSettingsDataAttributes) SetTargetChannelName(v string) {
	o.TargetChannelName = v
}

// GetTargetProjectName returns the TargetProjectName field value
func (o *ProjectSettingsDataAttributes) GetTargetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetProjectName
}

// GetTargetProjectNameOk returns a tuple with the TargetProjectName field value
// and a boolean to check if the value has been set.
func (o *ProjectSettingsDataAttributes) GetTargetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetProjectName, true
}

// SetTargetProjectName sets field value
func (o *ProjectSettingsDataAttributes) SetTargetProjectName(v string) {
	o.TargetProjectName = v
}

func (o ProjectSettingsDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectSettingsDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["is_active"] = o.IsActive
	toSerialize["severity_threshold"] = o.SeverityThreshold
	toSerialize["target_channel_id"] = o.TargetChannelId
	toSerialize["target_channel_name"] = o.TargetChannelName
	toSerialize["target_project_name"] = o.TargetProjectName
	return toSerialize, nil
}

func (o *ProjectSettingsDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_active",
		"severity_threshold",
		"target_channel_id",
		"target_channel_name",
		"target_project_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectSettingsDataAttributes := _ProjectSettingsDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectSettingsDataAttributes)

	if err != nil {
		return err
	}

	*o = ProjectSettingsDataAttributes(varProjectSettingsDataAttributes)

	return err
}

type NullableProjectSettingsDataAttributes struct {
	value *ProjectSettingsDataAttributes
	isSet bool
}

func (v NullableProjectSettingsDataAttributes) Get() *ProjectSettingsDataAttributes {
	return v.value
}

func (v *NullableProjectSettingsDataAttributes) Set(val *ProjectSettingsDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectSettingsDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectSettingsDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectSettingsDataAttributes(val *ProjectSettingsDataAttributes) *NullableProjectSettingsDataAttributes {
	return &NullableProjectSettingsDataAttributes{value: val, isSet: true}
}

func (v NullableProjectSettingsDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectSettingsDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


