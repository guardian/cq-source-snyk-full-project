/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RecurringTestsSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecurringTestsSettings{}

// RecurringTestsSettings Settings which describe how recurring tests are run for a project.
type RecurringTestsSettings struct {
	// Test frequency of a project. Also controls when automated PRs may be created.
	Frequency *string `json:"frequency,omitempty"`
}

// NewRecurringTestsSettings instantiates a new RecurringTestsSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurringTestsSettings() *RecurringTestsSettings {
	this := RecurringTestsSettings{}
	return &this
}

// NewRecurringTestsSettingsWithDefaults instantiates a new RecurringTestsSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurringTestsSettingsWithDefaults() *RecurringTestsSettings {
	this := RecurringTestsSettings{}
	return &this
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *RecurringTestsSettings) GetFrequency() string {
	if o == nil || IsNil(o.Frequency) {
		var ret string
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringTestsSettings) GetFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *RecurringTestsSettings) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given string and assigns it to the Frequency field.
func (o *RecurringTestsSettings) SetFrequency(v string) {
	o.Frequency = &v
}

func (o RecurringTestsSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecurringTestsSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	return toSerialize, nil
}

type NullableRecurringTestsSettings struct {
	value *RecurringTestsSettings
	isSet bool
}

func (v NullableRecurringTestsSettings) Get() *RecurringTestsSettings {
	return v.value
}

func (v *NullableRecurringTestsSettings) Set(val *RecurringTestsSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurringTestsSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurringTestsSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurringTestsSettings(val *RecurringTestsSettings) *NullableRecurringTestsSettings {
	return &NullableRecurringTestsSettings{value: val, isSet: true}
}

func (v NullableRecurringTestsSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurringTestsSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


