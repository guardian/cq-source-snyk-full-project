/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VersioningSchemaCustomType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersioningSchemaCustomType{}

// VersioningSchemaCustomType The Custom Schema type is a way for Snyk to understand your company’s container image tag versioning scheme, enabling Snyk to give more accurate base image upgrade recommendations.  This schema type is essentially a regular expression that groups the different parts of an image’s tag into comparable sections.  If your container image's tags follow a versioning scheme other than Semantic Versioning (SemVer),  it is highly recommended that you select the \"Custom Versioning\" schema for your image repositories. 
type VersioningSchemaCustomType struct {
	// The regular expression used to describe the format of tags. Keep in mind that backslashes in the expression need to be escaped due to being encompassed in a JSON string. 
	Expression string `json:"expression"`
	// A customizable string that can be set for a custom versioning schema to describe its meaning. This label has no function. 
	Label *string `json:"label,omitempty"`
	Type string `json:"type"`
}

type _VersioningSchemaCustomType VersioningSchemaCustomType

// NewVersioningSchemaCustomType instantiates a new VersioningSchemaCustomType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersioningSchemaCustomType(expression string, type_ string) *VersioningSchemaCustomType {
	this := VersioningSchemaCustomType{}
	this.Expression = expression
	this.Type = type_
	return &this
}

// NewVersioningSchemaCustomTypeWithDefaults instantiates a new VersioningSchemaCustomType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersioningSchemaCustomTypeWithDefaults() *VersioningSchemaCustomType {
	this := VersioningSchemaCustomType{}
	return &this
}

// GetExpression returns the Expression field value
func (o *VersioningSchemaCustomType) GetExpression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value
// and a boolean to check if the value has been set.
func (o *VersioningSchemaCustomType) GetExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expression, true
}

// SetExpression sets field value
func (o *VersioningSchemaCustomType) SetExpression(v string) {
	o.Expression = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *VersioningSchemaCustomType) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersioningSchemaCustomType) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *VersioningSchemaCustomType) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *VersioningSchemaCustomType) SetLabel(v string) {
	o.Label = &v
}

// GetType returns the Type field value
func (o *VersioningSchemaCustomType) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VersioningSchemaCustomType) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VersioningSchemaCustomType) SetType(v string) {
	o.Type = v
}

func (o VersioningSchemaCustomType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersioningSchemaCustomType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["expression"] = o.Expression
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *VersioningSchemaCustomType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"expression",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVersioningSchemaCustomType := _VersioningSchemaCustomType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVersioningSchemaCustomType)

	if err != nil {
		return err
	}

	*o = VersioningSchemaCustomType(varVersioningSchemaCustomType)

	return err
}

type NullableVersioningSchemaCustomType struct {
	value *VersioningSchemaCustomType
	isSet bool
}

func (v NullableVersioningSchemaCustomType) Get() *VersioningSchemaCustomType {
	return v.value
}

func (v *NullableVersioningSchemaCustomType) Set(val *VersioningSchemaCustomType) {
	v.value = val
	v.isSet = true
}

func (v NullableVersioningSchemaCustomType) IsSet() bool {
	return v.isSet
}

func (v *NullableVersioningSchemaCustomType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersioningSchemaCustomType(val *VersioningSchemaCustomType) *NullableVersioningSchemaCustomType {
	return &NullableVersioningSchemaCustomType{value: val, isSet: true}
}

func (v NullableVersioningSchemaCustomType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersioningSchemaCustomType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


