/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicAppAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicAppAttributes{}

// PublicAppAttributes struct for PublicAppAttributes
type PublicAppAttributes struct {
	// The oauth2 client id for the app.
	ClientId string `json:"client_id"`
	Context *Context `json:"context,omitempty"`
	// New name of the app to display to users during authorization flow.
	Name string `json:"name"`
	// The scopes this app is allowed to request during authorization.
	Scopes []string `json:"scopes,omitempty"`
}

type _PublicAppAttributes PublicAppAttributes

// NewPublicAppAttributes instantiates a new PublicAppAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicAppAttributes(clientId string, name string) *PublicAppAttributes {
	this := PublicAppAttributes{}
	this.ClientId = clientId
	this.Name = name
	return &this
}

// NewPublicAppAttributesWithDefaults instantiates a new PublicAppAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicAppAttributesWithDefaults() *PublicAppAttributes {
	this := PublicAppAttributes{}
	return &this
}

// GetClientId returns the ClientId field value
func (o *PublicAppAttributes) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *PublicAppAttributes) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *PublicAppAttributes) SetClientId(v string) {
	o.ClientId = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *PublicAppAttributes) GetContext() Context {
	if o == nil || IsNil(o.Context) {
		var ret Context
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicAppAttributes) GetContextOk() (*Context, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *PublicAppAttributes) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given Context and assigns it to the Context field.
func (o *PublicAppAttributes) SetContext(v Context) {
	o.Context = &v
}

// GetName returns the Name field value
func (o *PublicAppAttributes) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PublicAppAttributes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PublicAppAttributes) SetName(v string) {
	o.Name = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *PublicAppAttributes) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicAppAttributes) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *PublicAppAttributes) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *PublicAppAttributes) SetScopes(v []string) {
	o.Scopes = v
}

func (o PublicAppAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicAppAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["client_id"] = o.ClientId
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	return toSerialize, nil
}

func (o *PublicAppAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"client_id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicAppAttributes := _PublicAppAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicAppAttributes)

	if err != nil {
		return err
	}

	*o = PublicAppAttributes(varPublicAppAttributes)

	return err
}

type NullablePublicAppAttributes struct {
	value *PublicAppAttributes
	isSet bool
}

func (v NullablePublicAppAttributes) Get() *PublicAppAttributes {
	return v.value
}

func (v *NullablePublicAppAttributes) Set(val *PublicAppAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicAppAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicAppAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicAppAttributes(val *PublicAppAttributes) *NullablePublicAppAttributes {
	return &NullablePublicAppAttributes{value: val, isSet: true}
}

func (v NullablePublicAppAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicAppAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


