/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GrantType An authorization grant is a credential representing the resource owner's authorization (to access its protected resources) used by the client to obtain an access token. The grant type represents the way your app will get the access token.
type GrantType string

// List of GrantType
const (
	AUTHORIZATION_CODE GrantType = "authorization_code"
	CLIENT_CREDENTIALS GrantType = "client_credentials"
)

// All allowed values of GrantType enum
var AllowedGrantTypeEnumValues = []GrantType{
	"authorization_code",
	"client_credentials",
}

func (v *GrantType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GrantType(value)
	for _, existing := range AllowedGrantTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GrantType", value)
}

// NewGrantTypeFromValue returns a pointer to a valid GrantType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGrantTypeFromValue(v string) (*GrantType, error) {
	ev := GrantType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GrantType: valid values are %v", v, AllowedGrantTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GrantType) IsValid() bool {
	for _, existing := range AllowedGrantTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GrantType value
func (v GrantType) Ptr() *GrantType {
	return &v
}

type NullableGrantType struct {
	value *GrantType
	isSet bool
}

func (v NullableGrantType) Get() *GrantType {
	return v.value
}

func (v *NullableGrantType) Set(val *GrantType) {
	v.value = val
	v.isSet = true
}

func (v NullableGrantType) IsSet() bool {
	return v.isSet
}

func (v *NullableGrantType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGrantType(val *GrantType) *NullableGrantType {
	return &NullableGrantType{value: val, isSet: true}
}

func (v NullableGrantType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGrantType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

