/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VersioningSchemaSingleSelectionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersioningSchemaSingleSelectionType{}

// VersioningSchemaSingleSelectionType The Single Selection Versioning Schema allows manual setting of which image should be given as a recommendation.  Only one image can be set as the current recommendation. If no images are set as the current selection,  no recommendation will be given.  It is recommended to use this versioning schema if your repository's tags aren't supported by the other schemas. 
type VersioningSchemaSingleSelectionType struct {
	// Whether this image should be the recommendation. Only one image can be selected at a given time. Setting this as true will remove previous selection. 
	IsSelected bool `json:"is_selected"`
	Type string `json:"type"`
}

type _VersioningSchemaSingleSelectionType VersioningSchemaSingleSelectionType

// NewVersioningSchemaSingleSelectionType instantiates a new VersioningSchemaSingleSelectionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersioningSchemaSingleSelectionType(isSelected bool, type_ string) *VersioningSchemaSingleSelectionType {
	this := VersioningSchemaSingleSelectionType{}
	this.IsSelected = isSelected
	this.Type = type_
	return &this
}

// NewVersioningSchemaSingleSelectionTypeWithDefaults instantiates a new VersioningSchemaSingleSelectionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersioningSchemaSingleSelectionTypeWithDefaults() *VersioningSchemaSingleSelectionType {
	this := VersioningSchemaSingleSelectionType{}
	return &this
}

// GetIsSelected returns the IsSelected field value
func (o *VersioningSchemaSingleSelectionType) GetIsSelected() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSelected
}

// GetIsSelectedOk returns a tuple with the IsSelected field value
// and a boolean to check if the value has been set.
func (o *VersioningSchemaSingleSelectionType) GetIsSelectedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSelected, true
}

// SetIsSelected sets field value
func (o *VersioningSchemaSingleSelectionType) SetIsSelected(v bool) {
	o.IsSelected = v
}

// GetType returns the Type field value
func (o *VersioningSchemaSingleSelectionType) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VersioningSchemaSingleSelectionType) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VersioningSchemaSingleSelectionType) SetType(v string) {
	o.Type = v
}

func (o VersioningSchemaSingleSelectionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersioningSchemaSingleSelectionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["is_selected"] = o.IsSelected
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *VersioningSchemaSingleSelectionType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_selected",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVersioningSchemaSingleSelectionType := _VersioningSchemaSingleSelectionType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVersioningSchemaSingleSelectionType)

	if err != nil {
		return err
	}

	*o = VersioningSchemaSingleSelectionType(varVersioningSchemaSingleSelectionType)

	return err
}

type NullableVersioningSchemaSingleSelectionType struct {
	value *VersioningSchemaSingleSelectionType
	isSet bool
}

func (v NullableVersioningSchemaSingleSelectionType) Get() *VersioningSchemaSingleSelectionType {
	return v.value
}

func (v *NullableVersioningSchemaSingleSelectionType) Set(val *VersioningSchemaSingleSelectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableVersioningSchemaSingleSelectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableVersioningSchemaSingleSelectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersioningSchemaSingleSelectionType(val *VersioningSchemaSingleSelectionType) *NullableVersioningSchemaSingleSelectionType {
	return &NullableVersioningSchemaSingleSelectionType{value: val, isSet: true}
}

func (v NullableVersioningSchemaSingleSelectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersioningSchemaSingleSelectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


