/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoordinateVTwo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoordinateVTwo{}

// CoordinateVTwo struct for CoordinateVTwo
type CoordinateVTwo struct {
	Remedies []Remedy `json:"remedies,omitempty"`
	// The affected versions of this vulnerability.
	Representations []CoordinateVTwoRepresentationsInner `json:"representations"`
}

type _CoordinateVTwo CoordinateVTwo

// NewCoordinateVTwo instantiates a new CoordinateVTwo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoordinateVTwo(representations []CoordinateVTwoRepresentationsInner) *CoordinateVTwo {
	this := CoordinateVTwo{}
	this.Representations = representations
	return &this
}

// NewCoordinateVTwoWithDefaults instantiates a new CoordinateVTwo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoordinateVTwoWithDefaults() *CoordinateVTwo {
	this := CoordinateVTwo{}
	return &this
}

// GetRemedies returns the Remedies field value if set, zero value otherwise.
func (o *CoordinateVTwo) GetRemedies() []Remedy {
	if o == nil || IsNil(o.Remedies) {
		var ret []Remedy
		return ret
	}
	return o.Remedies
}

// GetRemediesOk returns a tuple with the Remedies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoordinateVTwo) GetRemediesOk() ([]Remedy, bool) {
	if o == nil || IsNil(o.Remedies) {
		return nil, false
	}
	return o.Remedies, true
}

// HasRemedies returns a boolean if a field has been set.
func (o *CoordinateVTwo) HasRemedies() bool {
	if o != nil && !IsNil(o.Remedies) {
		return true
	}

	return false
}

// SetRemedies gets a reference to the given []Remedy and assigns it to the Remedies field.
func (o *CoordinateVTwo) SetRemedies(v []Remedy) {
	o.Remedies = v
}

// GetRepresentations returns the Representations field value
func (o *CoordinateVTwo) GetRepresentations() []CoordinateVTwoRepresentationsInner {
	if o == nil {
		var ret []CoordinateVTwoRepresentationsInner
		return ret
	}

	return o.Representations
}

// GetRepresentationsOk returns a tuple with the Representations field value
// and a boolean to check if the value has been set.
func (o *CoordinateVTwo) GetRepresentationsOk() ([]CoordinateVTwoRepresentationsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Representations, true
}

// SetRepresentations sets field value
func (o *CoordinateVTwo) SetRepresentations(v []CoordinateVTwoRepresentationsInner) {
	o.Representations = v
}

func (o CoordinateVTwo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoordinateVTwo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Remedies) {
		toSerialize["remedies"] = o.Remedies
	}
	toSerialize["representations"] = o.Representations
	return toSerialize, nil
}

func (o *CoordinateVTwo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"representations",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoordinateVTwo := _CoordinateVTwo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoordinateVTwo)

	if err != nil {
		return err
	}

	*o = CoordinateVTwo(varCoordinateVTwo)

	return err
}

type NullableCoordinateVTwo struct {
	value *CoordinateVTwo
	isSet bool
}

func (v NullableCoordinateVTwo) Get() *CoordinateVTwo {
	return v.value
}

func (v *NullableCoordinateVTwo) Set(val *CoordinateVTwo) {
	v.value = val
	v.isSet = true
}

func (v NullableCoordinateVTwo) IsSet() bool {
	return v.isSet
}

func (v *NullableCoordinateVTwo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoordinateVTwo(val *CoordinateVTwo) *NullableCoordinateVTwo {
	return &NullableCoordinateVTwo{value: val, isSet: true}
}

func (v NullableCoordinateVTwo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoordinateVTwo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


