/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ProjectMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectMeta{}

// ProjectMeta struct for ProjectMeta
type ProjectMeta struct {
	// The time the project was imported
	Imported time.Time `json:"imported"`
	// The sum of critical severity issues of the project
	IssuesCriticalCount float32 `json:"issues_critical_count"`
	// The sum of high severity issues of the project
	IssuesHighCount float32 `json:"issues_high_count"`
	// The sum of low severity issues of the project
	IssuesLowCount float32 `json:"issues_low_count"`
	// The sum of medium severity issues of the project
	IssuesMediumCount float32 `json:"issues_medium_count"`
	// The time the project was last tested
	LastTestedAt time.Time `json:"last_tested_at"`
}

type _ProjectMeta ProjectMeta

// NewProjectMeta instantiates a new ProjectMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectMeta(imported time.Time, issuesCriticalCount float32, issuesHighCount float32, issuesLowCount float32, issuesMediumCount float32, lastTestedAt time.Time) *ProjectMeta {
	this := ProjectMeta{}
	this.Imported = imported
	this.IssuesCriticalCount = issuesCriticalCount
	this.IssuesHighCount = issuesHighCount
	this.IssuesLowCount = issuesLowCount
	this.IssuesMediumCount = issuesMediumCount
	this.LastTestedAt = lastTestedAt
	return &this
}

// NewProjectMetaWithDefaults instantiates a new ProjectMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectMetaWithDefaults() *ProjectMeta {
	this := ProjectMeta{}
	return &this
}

// GetImported returns the Imported field value
func (o *ProjectMeta) GetImported() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Imported
}

// GetImportedOk returns a tuple with the Imported field value
// and a boolean to check if the value has been set.
func (o *ProjectMeta) GetImportedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Imported, true
}

// SetImported sets field value
func (o *ProjectMeta) SetImported(v time.Time) {
	o.Imported = v
}

// GetIssuesCriticalCount returns the IssuesCriticalCount field value
func (o *ProjectMeta) GetIssuesCriticalCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.IssuesCriticalCount
}

// GetIssuesCriticalCountOk returns a tuple with the IssuesCriticalCount field value
// and a boolean to check if the value has been set.
func (o *ProjectMeta) GetIssuesCriticalCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuesCriticalCount, true
}

// SetIssuesCriticalCount sets field value
func (o *ProjectMeta) SetIssuesCriticalCount(v float32) {
	o.IssuesCriticalCount = v
}

// GetIssuesHighCount returns the IssuesHighCount field value
func (o *ProjectMeta) GetIssuesHighCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.IssuesHighCount
}

// GetIssuesHighCountOk returns a tuple with the IssuesHighCount field value
// and a boolean to check if the value has been set.
func (o *ProjectMeta) GetIssuesHighCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuesHighCount, true
}

// SetIssuesHighCount sets field value
func (o *ProjectMeta) SetIssuesHighCount(v float32) {
	o.IssuesHighCount = v
}

// GetIssuesLowCount returns the IssuesLowCount field value
func (o *ProjectMeta) GetIssuesLowCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.IssuesLowCount
}

// GetIssuesLowCountOk returns a tuple with the IssuesLowCount field value
// and a boolean to check if the value has been set.
func (o *ProjectMeta) GetIssuesLowCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuesLowCount, true
}

// SetIssuesLowCount sets field value
func (o *ProjectMeta) SetIssuesLowCount(v float32) {
	o.IssuesLowCount = v
}

// GetIssuesMediumCount returns the IssuesMediumCount field value
func (o *ProjectMeta) GetIssuesMediumCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.IssuesMediumCount
}

// GetIssuesMediumCountOk returns a tuple with the IssuesMediumCount field value
// and a boolean to check if the value has been set.
func (o *ProjectMeta) GetIssuesMediumCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuesMediumCount, true
}

// SetIssuesMediumCount sets field value
func (o *ProjectMeta) SetIssuesMediumCount(v float32) {
	o.IssuesMediumCount = v
}

// GetLastTestedAt returns the LastTestedAt field value
func (o *ProjectMeta) GetLastTestedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastTestedAt
}

// GetLastTestedAtOk returns a tuple with the LastTestedAt field value
// and a boolean to check if the value has been set.
func (o *ProjectMeta) GetLastTestedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastTestedAt, true
}

// SetLastTestedAt sets field value
func (o *ProjectMeta) SetLastTestedAt(v time.Time) {
	o.LastTestedAt = v
}

func (o ProjectMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["imported"] = o.Imported
	toSerialize["issues_critical_count"] = o.IssuesCriticalCount
	toSerialize["issues_high_count"] = o.IssuesHighCount
	toSerialize["issues_low_count"] = o.IssuesLowCount
	toSerialize["issues_medium_count"] = o.IssuesMediumCount
	toSerialize["last_tested_at"] = o.LastTestedAt
	return toSerialize, nil
}

func (o *ProjectMeta) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"imported",
		"issues_critical_count",
		"issues_high_count",
		"issues_low_count",
		"issues_medium_count",
		"last_tested_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectMeta := _ProjectMeta{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectMeta)

	if err != nil {
		return err
	}

	*o = ProjectMeta(varProjectMeta)

	return err
}

type NullableProjectMeta struct {
	value *ProjectMeta
	isSet bool
}

func (v NullableProjectMeta) Get() *ProjectMeta {
	return v.value
}

func (v *NullableProjectMeta) Set(val *ProjectMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectMeta(val *ProjectMeta) *NullableProjectMeta {
	return &NullableProjectMeta{value: val, isSet: true}
}

func (v NullableProjectMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


