/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Platform the model 'Platform'
type Platform string

// List of Platform
const (
	AIX_PPC64 Platform = "aix/ppc64"
	ANDROID_386 Platform = "android/386"
	ANDROID_AMD64 Platform = "android/amd64"
	ANDROID_ARM Platform = "android/arm"
	ANDROID_ARM_V5 Platform = "android/arm/v5"
	ANDROID_ARM_V6 Platform = "android/arm/v6"
	ANDROID_ARM_V7 Platform = "android/arm/v7"
	ANDROID_ARM64 Platform = "android/arm64"
	ANDROID_ARM64_V8 Platform = "android/arm64/v8"
	DARWIN_AMD64 Platform = "darwin/amd64"
	DARWIN_ARM Platform = "darwin/arm"
	DARWIN_ARM_V5 Platform = "darwin/arm/v5"
	DARWIN_ARM_V6 Platform = "darwin/arm/v6"
	DARWIN_ARM_V7 Platform = "darwin/arm/v7"
	DARWIN_ARM64 Platform = "darwin/arm64"
	DARWIN_ARM64_V8 Platform = "darwin/arm64/v8"
	DRAGONFLY_AMD64 Platform = "dragonfly/amd64"
	FREEBSD_386 Platform = "freebsd/386"
	FREEBSD_AMD64 Platform = "freebsd/amd64"
	FREEBSD_ARM Platform = "freebsd/arm"
	FREEBSD_ARM_V5 Platform = "freebsd/arm/v5"
	FREEBSD_ARM_V6 Platform = "freebsd/arm/v6"
	FREEBSD_ARM_V7 Platform = "freebsd/arm/v7"
	ILLUMOS_AMD64 Platform = "illumos/amd64"
	IOS_ARM64 Platform = "ios/arm64"
	IOS_ARM64_V8 Platform = "ios/arm64/v8"
	JS_WASM Platform = "js/wasm"
	LINUX_386 Platform = "linux/386"
	LINUX_AMD64 Platform = "linux/amd64"
	LINUX_ARM Platform = "linux/arm"
	LINUX_ARM_V5 Platform = "linux/arm/v5"
	LINUX_ARM_V6 Platform = "linux/arm/v6"
	LINUX_ARM_V7 Platform = "linux/arm/v7"
	LINUX_ARM64 Platform = "linux/arm64"
	LINUX_ARM64_V8 Platform = "linux/arm64/v8"
	LINUX_LOONG64 Platform = "linux/loong64"
	LINUX_MIPS Platform = "linux/mips"
	LINUX_MIPSLE Platform = "linux/mipsle"
	LINUX_MIPS64 Platform = "linux/mips64"
	LINUX_MIPS64LE Platform = "linux/mips64le"
	LINUX_PPC64 Platform = "linux/ppc64"
	LINUX_PPC64LE Platform = "linux/ppc64le"
	LINUX_RISCV64 Platform = "linux/riscv64"
	LINUX_S390X Platform = "linux/s390x"
	LINUX_X86_64 Platform = "linux/x86_64"
	NETBSD_386 Platform = "netbsd/386"
	NETBSD_AMD64 Platform = "netbsd/amd64"
	NETBSD_ARM Platform = "netbsd/arm"
	NETBSD_ARM_V5 Platform = "netbsd/arm/v5"
	NETBSD_ARM_V6 Platform = "netbsd/arm/v6"
	NETBSD_ARM_V7 Platform = "netbsd/arm/v7"
	OPENBSD_386 Platform = "openbsd/386"
	OPENBSD_AMD64 Platform = "openbsd/amd64"
	OPENBSD_ARM Platform = "openbsd/arm"
	OPENBSD_ARM_V5 Platform = "openbsd/arm/v5"
	OPENBSD_ARM_V6 Platform = "openbsd/arm/v6"
	OPENBSD_ARM_V7 Platform = "openbsd/arm/v7"
	OPENBSD_ARM64 Platform = "openbsd/arm64"
	OPENBSD_ARM64_V8 Platform = "openbsd/arm64/v8"
	PLAN9_386 Platform = "plan9/386"
	PLAN9_AMD64 Platform = "plan9/amd64"
	PLAN9_ARM Platform = "plan9/arm"
	PLAN9_ARM_V5 Platform = "plan9/arm/v5"
	PLAN9_ARM_V6 Platform = "plan9/arm/v6"
	PLAN9_ARM_V7 Platform = "plan9/arm/v7"
	SOLARIS_AMD64 Platform = "solaris/amd64"
	WINDOWS_386 Platform = "windows/386"
	WINDOWS_AMD64 Platform = "windows/amd64"
	WINDOWS_ARM Platform = "windows/arm"
	WINDOWS_ARM_V5 Platform = "windows/arm/v5"
	WINDOWS_ARM_V6 Platform = "windows/arm/v6"
	WINDOWS_ARM_V7 Platform = "windows/arm/v7"
	WINDOWS_ARM64 Platform = "windows/arm64"
	WINDOWS_ARM64_V8 Platform = "windows/arm64/v8"
)

// All allowed values of Platform enum
var AllowedPlatformEnumValues = []Platform{
	"aix/ppc64",
	"android/386",
	"android/amd64",
	"android/arm",
	"android/arm/v5",
	"android/arm/v6",
	"android/arm/v7",
	"android/arm64",
	"android/arm64/v8",
	"darwin/amd64",
	"darwin/arm",
	"darwin/arm/v5",
	"darwin/arm/v6",
	"darwin/arm/v7",
	"darwin/arm64",
	"darwin/arm64/v8",
	"dragonfly/amd64",
	"freebsd/386",
	"freebsd/amd64",
	"freebsd/arm",
	"freebsd/arm/v5",
	"freebsd/arm/v6",
	"freebsd/arm/v7",
	"illumos/amd64",
	"ios/arm64",
	"ios/arm64/v8",
	"js/wasm",
	"linux/386",
	"linux/amd64",
	"linux/arm",
	"linux/arm/v5",
	"linux/arm/v6",
	"linux/arm/v7",
	"linux/arm64",
	"linux/arm64/v8",
	"linux/loong64",
	"linux/mips",
	"linux/mipsle",
	"linux/mips64",
	"linux/mips64le",
	"linux/ppc64",
	"linux/ppc64le",
	"linux/riscv64",
	"linux/s390x",
	"linux/x86_64",
	"netbsd/386",
	"netbsd/amd64",
	"netbsd/arm",
	"netbsd/arm/v5",
	"netbsd/arm/v6",
	"netbsd/arm/v7",
	"openbsd/386",
	"openbsd/amd64",
	"openbsd/arm",
	"openbsd/arm/v5",
	"openbsd/arm/v6",
	"openbsd/arm/v7",
	"openbsd/arm64",
	"openbsd/arm64/v8",
	"plan9/386",
	"plan9/amd64",
	"plan9/arm",
	"plan9/arm/v5",
	"plan9/arm/v6",
	"plan9/arm/v7",
	"solaris/amd64",
	"windows/386",
	"windows/amd64",
	"windows/arm",
	"windows/arm/v5",
	"windows/arm/v6",
	"windows/arm/v7",
	"windows/arm64",
	"windows/arm64/v8",
}

func (v *Platform) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Platform(value)
	for _, existing := range AllowedPlatformEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Platform", value)
}

// NewPlatformFromValue returns a pointer to a valid Platform
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlatformFromValue(v string) (*Platform, error) {
	ev := Platform(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Platform: valid values are %v", v, AllowedPlatformEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Platform) IsValid() bool {
	for _, existing := range AllowedPlatformEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Platform value
func (v Platform) Ptr() *Platform {
	return &v
}

type NullablePlatform struct {
	value *Platform
	isSet bool
}

func (v NullablePlatform) Get() *Platform {
	return v.value
}

func (v *NullablePlatform) Set(val *Platform) {
	v.value = val
	v.isSet = true
}

func (v NullablePlatform) IsSet() bool {
	return v.isSet
}

func (v *NullablePlatform) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlatform(val *Platform) *NullablePlatform {
	return &NullablePlatform{value: val, isSet: true}
}

func (v NullablePlatform) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlatform) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

