/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LinkPropertyOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkPropertyOneOf{}

// LinkPropertyOneOf struct for LinkPropertyOneOf
type LinkPropertyOneOf struct {
	// A string containing the linkâ€™s URL.
	Href string `json:"href"`
	// Free-form object that may contain non-standard information.
	Meta map[string]interface{} `json:"meta,omitempty"`
}

type _LinkPropertyOneOf LinkPropertyOneOf

// NewLinkPropertyOneOf instantiates a new LinkPropertyOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkPropertyOneOf(href string) *LinkPropertyOneOf {
	this := LinkPropertyOneOf{}
	this.Href = href
	return &this
}

// NewLinkPropertyOneOfWithDefaults instantiates a new LinkPropertyOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkPropertyOneOfWithDefaults() *LinkPropertyOneOf {
	this := LinkPropertyOneOf{}
	return &this
}

// GetHref returns the Href field value
func (o *LinkPropertyOneOf) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *LinkPropertyOneOf) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *LinkPropertyOneOf) SetHref(v string) {
	o.Href = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *LinkPropertyOneOf) GetMeta() map[string]interface{} {
	if o == nil || IsNil(o.Meta) {
		var ret map[string]interface{}
		return ret
	}
	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkPropertyOneOf) GetMetaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Meta) {
		return map[string]interface{}{}, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *LinkPropertyOneOf) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]interface{} and assigns it to the Meta field.
func (o *LinkPropertyOneOf) SetMeta(v map[string]interface{}) {
	o.Meta = v
}

func (o LinkPropertyOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkPropertyOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["href"] = o.Href
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	return toSerialize, nil
}

func (o *LinkPropertyOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"href",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLinkPropertyOneOf := _LinkPropertyOneOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLinkPropertyOneOf)

	if err != nil {
		return err
	}

	*o = LinkPropertyOneOf(varLinkPropertyOneOf)

	return err
}

type NullableLinkPropertyOneOf struct {
	value *LinkPropertyOneOf
	isSet bool
}

func (v NullableLinkPropertyOneOf) Get() *LinkPropertyOneOf {
	return v.value
}

func (v *NullableLinkPropertyOneOf) Set(val *LinkPropertyOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkPropertyOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkPropertyOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkPropertyOneOf(val *LinkPropertyOneOf) *NullableLinkPropertyOneOf {
	return &NullableLinkPropertyOneOf{value: val, isSet: true}
}

func (v NullableLinkPropertyOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkPropertyOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


