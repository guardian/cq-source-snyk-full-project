/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
	"time"
)


// ProjectsAPIService ProjectsAPI service
type ProjectsAPIService service

type ApiDeleteOrgProjectRequest struct {
	ctx context.Context
	ApiService *ProjectsAPIService
	orgId string
	projectId string
	version *string
}

// The requested version of the endpoint to process the request
func (r ApiDeleteOrgProjectRequest) Version(version string) ApiDeleteOrgProjectRequest {
	r.version = &version
	return r
}

func (r ApiDeleteOrgProjectRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteOrgProjectExecute(r)
}

/*
DeleteOrgProject Delete project by project ID.

Delete one project in the organization by project ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The ID of the org to which the project belongs to.
 @param projectId The ID of the project.
 @return ApiDeleteOrgProjectRequest
*/
func (a *ProjectsAPIService) DeleteOrgProject(ctx context.Context, orgId string, projectId string) ApiDeleteOrgProjectRequest {
	return ApiDeleteOrgProjectRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		projectId: projectId,
	}
}

// Execute executes the request
func (a *ProjectsAPIService) DeleteOrgProjectExecute(r ApiDeleteOrgProjectRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectsAPIService.DeleteOrgProject")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orgs/{org_id}/projects/{project_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.version == nil {
		return nil, reportError("version is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetOrgProjectRequest struct {
	ctx context.Context
	ApiService *ProjectsAPIService
	orgId string
	projectId string
	version *string
	expand *[]string
	metaLatestIssueCounts *bool
	metaLatestDependencyTotal *bool
}

// The requested version of the endpoint to process the request
func (r ApiGetOrgProjectRequest) Version(version string) ApiGetOrgProjectRequest {
	r.version = &version
	return r
}

// Expand relationships.
func (r ApiGetOrgProjectRequest) Expand(expand []string) ApiGetOrgProjectRequest {
	r.expand = &expand
	return r
}

// Include a summary count for the issues found in the most recent scan of this project
func (r ApiGetOrgProjectRequest) MetaLatestIssueCounts(metaLatestIssueCounts bool) ApiGetOrgProjectRequest {
	r.metaLatestIssueCounts = &metaLatestIssueCounts
	return r
}

// Include the total number of dependencies found in the most recent scan of this project
func (r ApiGetOrgProjectRequest) MetaLatestDependencyTotal(metaLatestDependencyTotal bool) ApiGetOrgProjectRequest {
	r.metaLatestDependencyTotal = &metaLatestDependencyTotal
	return r
}

func (r ApiGetOrgProjectRequest) Execute() (*GetOrgProject200Response, *http.Response, error) {
	return r.ApiService.GetOrgProjectExecute(r)
}

/*
GetOrgProject Get project by project ID.

Get one project of the organization by project ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The ID of the org to which the project belongs to.
 @param projectId The ID of the project.
 @return ApiGetOrgProjectRequest
*/
func (a *ProjectsAPIService) GetOrgProject(ctx context.Context, orgId string, projectId string) ApiGetOrgProjectRequest {
	return ApiGetOrgProjectRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return GetOrgProject200Response
func (a *ProjectsAPIService) GetOrgProjectExecute(r ApiGetOrgProjectRequest) (*GetOrgProject200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetOrgProject200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectsAPIService.GetOrgProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orgs/{org_id}/projects/{project_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.version == nil {
		return localVarReturnValue, nil, reportError("version is required and must be specified")
	}

	if r.expand != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "csv")
	}
	if r.metaLatestIssueCounts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "meta.latest_issue_counts", r.metaLatestIssueCounts, "")
	}
	if r.metaLatestDependencyTotal != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "meta.latest_dependency_total", r.metaLatestDependencyTotal, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListOrgProjectsRequest struct {
	ctx context.Context
	ApiService *ProjectsAPIService
	orgId string
	version *string
	targetId *[]string
	targetReference *string
	targetFile *string
	targetRuntime *string
	metaCount *string
	ids *[]string
	names *[]string
	origins *[]string
	types *[]string
	expand *[]string
	metaLatestIssueCounts *bool
	metaLatestDependencyTotal *bool
	cliMonitoredBefore *time.Time
	cliMonitoredAfter *time.Time
	importingUserPublicId *[]string
	tags *[]string
	businessCriticality *[]string
	environment *[]string
	lifecycle *[]string
	startingAfter *string
	endingBefore *string
	limit *int32
}

// The requested version of the endpoint to process the request
func (r ApiListOrgProjectsRequest) Version(version string) ApiListOrgProjectsRequest {
	r.version = &version
	return r
}

// Return projects that belong to the provided targets
func (r ApiListOrgProjectsRequest) TargetId(targetId []string) ApiListOrgProjectsRequest {
	r.targetId = &targetId
	return r
}

// Return projects that match the provided target reference
func (r ApiListOrgProjectsRequest) TargetReference(targetReference string) ApiListOrgProjectsRequest {
	r.targetReference = &targetReference
	return r
}

// Return projects that match the provided target file
func (r ApiListOrgProjectsRequest) TargetFile(targetFile string) ApiListOrgProjectsRequest {
	r.targetFile = &targetFile
	return r
}

// Return projects that match the provided target runtime
func (r ApiListOrgProjectsRequest) TargetRuntime(targetRuntime string) ApiListOrgProjectsRequest {
	r.targetRuntime = &targetRuntime
	return r
}

// The collection count.
func (r ApiListOrgProjectsRequest) MetaCount(metaCount string) ApiListOrgProjectsRequest {
	r.metaCount = &metaCount
	return r
}

// Return projects that match the provided IDs.
func (r ApiListOrgProjectsRequest) Ids(ids []string) ApiListOrgProjectsRequest {
	r.ids = &ids
	return r
}

// Return projects that match the provided names.
func (r ApiListOrgProjectsRequest) Names(names []string) ApiListOrgProjectsRequest {
	r.names = &names
	return r
}

// Return projects that match the provided origins.
func (r ApiListOrgProjectsRequest) Origins(origins []string) ApiListOrgProjectsRequest {
	r.origins = &origins
	return r
}

// Return projects that match the provided types.
func (r ApiListOrgProjectsRequest) Types(types []string) ApiListOrgProjectsRequest {
	r.types = &types
	return r
}

// Expand relationships.
func (r ApiListOrgProjectsRequest) Expand(expand []string) ApiListOrgProjectsRequest {
	r.expand = &expand
	return r
}

// Include a summary count for the issues found in the most recent scan of this project
func (r ApiListOrgProjectsRequest) MetaLatestIssueCounts(metaLatestIssueCounts bool) ApiListOrgProjectsRequest {
	r.metaLatestIssueCounts = &metaLatestIssueCounts
	return r
}

// Include the total number of dependencies found in the most recent scan of this project
func (r ApiListOrgProjectsRequest) MetaLatestDependencyTotal(metaLatestDependencyTotal bool) ApiListOrgProjectsRequest {
	r.metaLatestDependencyTotal = &metaLatestDependencyTotal
	return r
}

// Filter projects uploaded and monitored before this date (encoded value)
func (r ApiListOrgProjectsRequest) CliMonitoredBefore(cliMonitoredBefore time.Time) ApiListOrgProjectsRequest {
	r.cliMonitoredBefore = &cliMonitoredBefore
	return r
}

// Filter projects uploaded and monitored after this date (encoded value)
func (r ApiListOrgProjectsRequest) CliMonitoredAfter(cliMonitoredAfter time.Time) ApiListOrgProjectsRequest {
	r.cliMonitoredAfter = &cliMonitoredAfter
	return r
}

// Return projects that match the provided importing user public ids.
func (r ApiListOrgProjectsRequest) ImportingUserPublicId(importingUserPublicId []string) ApiListOrgProjectsRequest {
	r.importingUserPublicId = &importingUserPublicId
	return r
}

// Return projects that match all the provided tags
func (r ApiListOrgProjectsRequest) Tags(tags []string) ApiListOrgProjectsRequest {
	r.tags = &tags
	return r
}

// Return projects that match all the provided business_criticality value
func (r ApiListOrgProjectsRequest) BusinessCriticality(businessCriticality []string) ApiListOrgProjectsRequest {
	r.businessCriticality = &businessCriticality
	return r
}

// Return projects that match all the provided environment values
func (r ApiListOrgProjectsRequest) Environment(environment []string) ApiListOrgProjectsRequest {
	r.environment = &environment
	return r
}

// Return projects that match all the provided lifecycle values
func (r ApiListOrgProjectsRequest) Lifecycle(lifecycle []string) ApiListOrgProjectsRequest {
	r.lifecycle = &lifecycle
	return r
}

// Return the page of results immediately after this cursor
func (r ApiListOrgProjectsRequest) StartingAfter(startingAfter string) ApiListOrgProjectsRequest {
	r.startingAfter = &startingAfter
	return r
}

// Return the page of results immediately before this cursor
func (r ApiListOrgProjectsRequest) EndingBefore(endingBefore string) ApiListOrgProjectsRequest {
	r.endingBefore = &endingBefore
	return r
}

// Number of results to return per page
func (r ApiListOrgProjectsRequest) Limit(limit int32) ApiListOrgProjectsRequest {
	r.limit = &limit
	return r
}

func (r ApiListOrgProjectsRequest) Execute() (*ListOrgProjects200Response, *http.Response, error) {
	return r.ApiService.ListOrgProjectsExecute(r)
}

/*
ListOrgProjects List all Projects for an Org with the given Org ID.

List all Projects for an Org.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The ID of the org that the projects belong to.
 @return ApiListOrgProjectsRequest
*/
func (a *ProjectsAPIService) ListOrgProjects(ctx context.Context, orgId string) ApiListOrgProjectsRequest {
	return ApiListOrgProjectsRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return ListOrgProjects200Response
func (a *ProjectsAPIService) ListOrgProjectsExecute(r ApiListOrgProjectsRequest) (*ListOrgProjects200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListOrgProjects200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectsAPIService.ListOrgProjects")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orgs/{org_id}/projects"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.version == nil {
		return localVarReturnValue, nil, reportError("version is required and must be specified")
	}

	if r.targetId != nil {
		t := *r.targetId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "target_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "target_id", t, "multi")
		}
	}
	if r.targetReference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target_reference", r.targetReference, "")
	}
	if r.targetFile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target_file", r.targetFile, "")
	}
	if r.targetRuntime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target_runtime", r.targetRuntime, "")
	}
	if r.metaCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "meta_count", r.metaCount, "")
	}
	if r.ids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ids", r.ids, "csv")
	}
	if r.names != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "names", r.names, "csv")
	}
	if r.origins != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "origins", r.origins, "csv")
	}
	if r.types != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "types", r.types, "csv")
	}
	if r.expand != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "csv")
	}
	if r.metaLatestIssueCounts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "meta.latest_issue_counts", r.metaLatestIssueCounts, "")
	}
	if r.metaLatestDependencyTotal != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "meta.latest_dependency_total", r.metaLatestDependencyTotal, "")
	}
	if r.cliMonitoredBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cli_monitored_before", r.cliMonitoredBefore, "")
	}
	if r.cliMonitoredAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cli_monitored_after", r.cliMonitoredAfter, "")
	}
	if r.importingUserPublicId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importing_user_public_id", r.importingUserPublicId, "csv")
	}
	if r.tags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags", r.tags, "csv")
	}
	if r.businessCriticality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "business_criticality", r.businessCriticality, "csv")
	}
	if r.environment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "environment", r.environment, "csv")
	}
	if r.lifecycle != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lifecycle", r.lifecycle, "csv")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "")
	if r.startingAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "starting_after", r.startingAfter, "")
	}
	if r.endingBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ending_before", r.endingBefore, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 10
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateOrgProjectRequest struct {
	ctx context.Context
	ApiService *ProjectsAPIService
	version *string
	orgId string
	projectId string
	expand *[]string
	patchProjectRequest *PatchProjectRequest
}

// The requested version of the endpoint to process the request
func (r ApiUpdateOrgProjectRequest) Version(version string) ApiUpdateOrgProjectRequest {
	r.version = &version
	return r
}

// Expand relationships.
func (r ApiUpdateOrgProjectRequest) Expand(expand []string) ApiUpdateOrgProjectRequest {
	r.expand = &expand
	return r
}

// The project attributes to be updated.
func (r ApiUpdateOrgProjectRequest) PatchProjectRequest(patchProjectRequest PatchProjectRequest) ApiUpdateOrgProjectRequest {
	r.patchProjectRequest = &patchProjectRequest
	return r
}

func (r ApiUpdateOrgProjectRequest) Execute() (*UpdateOrgProject200Response, *http.Response, error) {
	return r.ApiService.UpdateOrgProjectExecute(r)
}

/*
UpdateOrgProject Updates project by project ID.

Updates one project of the organization by project ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The ID of the Org the project belongs to.
 @param projectId The ID of the project to patch.
 @return ApiUpdateOrgProjectRequest
*/
func (a *ProjectsAPIService) UpdateOrgProject(ctx context.Context, orgId string, projectId string) ApiUpdateOrgProjectRequest {
	return ApiUpdateOrgProjectRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return UpdateOrgProject200Response
func (a *ProjectsAPIService) UpdateOrgProjectExecute(r ApiUpdateOrgProjectRequest) (*UpdateOrgProject200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateOrgProject200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectsAPIService.UpdateOrgProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orgs/{org_id}/projects/{project_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.version == nil {
		return localVarReturnValue, nil, reportError("version is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "")
	if r.expand != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchProjectRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
