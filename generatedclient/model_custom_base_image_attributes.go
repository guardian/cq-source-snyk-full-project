/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomBaseImageAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomBaseImageAttributes{}

// CustomBaseImageAttributes struct for CustomBaseImageAttributes
type CustomBaseImageAttributes struct {
	// Whether this image should be recommended as a base image upgrade.  If set to true, this image could be shown as a base image upgrade to other projects. If set to false this image will never be recommended as an upgrade. 
	IncludeInRecommendations bool `json:"include_in_recommendations"`
	// The ID of the container project that the custom base image is based off of. The attributes of this custom base image are taken from the latest snapshot at the time of creation. This means that no changes should be made to the original project after the creation of the custom base image, as new snapshots created from any changes will NOT be picked up. 
	ProjectId string `json:"project_id"`
	VersioningSchema *VersioningSchema `json:"versioning_schema,omitempty"`
}

type _CustomBaseImageAttributes CustomBaseImageAttributes

// NewCustomBaseImageAttributes instantiates a new CustomBaseImageAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomBaseImageAttributes(includeInRecommendations bool, projectId string) *CustomBaseImageAttributes {
	this := CustomBaseImageAttributes{}
	this.IncludeInRecommendations = includeInRecommendations
	this.ProjectId = projectId
	return &this
}

// NewCustomBaseImageAttributesWithDefaults instantiates a new CustomBaseImageAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomBaseImageAttributesWithDefaults() *CustomBaseImageAttributes {
	this := CustomBaseImageAttributes{}
	return &this
}

// GetIncludeInRecommendations returns the IncludeInRecommendations field value
func (o *CustomBaseImageAttributes) GetIncludeInRecommendations() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IncludeInRecommendations
}

// GetIncludeInRecommendationsOk returns a tuple with the IncludeInRecommendations field value
// and a boolean to check if the value has been set.
func (o *CustomBaseImageAttributes) GetIncludeInRecommendationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncludeInRecommendations, true
}

// SetIncludeInRecommendations sets field value
func (o *CustomBaseImageAttributes) SetIncludeInRecommendations(v bool) {
	o.IncludeInRecommendations = v
}

// GetProjectId returns the ProjectId field value
func (o *CustomBaseImageAttributes) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *CustomBaseImageAttributes) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *CustomBaseImageAttributes) SetProjectId(v string) {
	o.ProjectId = v
}

// GetVersioningSchema returns the VersioningSchema field value if set, zero value otherwise.
func (o *CustomBaseImageAttributes) GetVersioningSchema() VersioningSchema {
	if o == nil || IsNil(o.VersioningSchema) {
		var ret VersioningSchema
		return ret
	}
	return *o.VersioningSchema
}

// GetVersioningSchemaOk returns a tuple with the VersioningSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomBaseImageAttributes) GetVersioningSchemaOk() (*VersioningSchema, bool) {
	if o == nil || IsNil(o.VersioningSchema) {
		return nil, false
	}
	return o.VersioningSchema, true
}

// HasVersioningSchema returns a boolean if a field has been set.
func (o *CustomBaseImageAttributes) HasVersioningSchema() bool {
	if o != nil && !IsNil(o.VersioningSchema) {
		return true
	}

	return false
}

// SetVersioningSchema gets a reference to the given VersioningSchema and assigns it to the VersioningSchema field.
func (o *CustomBaseImageAttributes) SetVersioningSchema(v VersioningSchema) {
	o.VersioningSchema = &v
}

func (o CustomBaseImageAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomBaseImageAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["include_in_recommendations"] = o.IncludeInRecommendations
	toSerialize["project_id"] = o.ProjectId
	if !IsNil(o.VersioningSchema) {
		toSerialize["versioning_schema"] = o.VersioningSchema
	}
	return toSerialize, nil
}

func (o *CustomBaseImageAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"include_in_recommendations",
		"project_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomBaseImageAttributes := _CustomBaseImageAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomBaseImageAttributes)

	if err != nil {
		return err
	}

	*o = CustomBaseImageAttributes(varCustomBaseImageAttributes)

	return err
}

type NullableCustomBaseImageAttributes struct {
	value *CustomBaseImageAttributes
	isSet bool
}

func (v NullableCustomBaseImageAttributes) Get() *CustomBaseImageAttributes {
	return v.value
}

func (v *NullableCustomBaseImageAttributes) Set(val *CustomBaseImageAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomBaseImageAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomBaseImageAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomBaseImageAttributes(val *CustomBaseImageAttributes) *NullableCustomBaseImageAttributes {
	return &NullableCustomBaseImageAttributes{value: val, isSet: true}
}

func (v NullableCustomBaseImageAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomBaseImageAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


