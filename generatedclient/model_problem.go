/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Problem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Problem{}

// Problem struct for Problem
type Problem struct {
	// When this problem was disclosed to the public.
	DisclosedAt *time.Time `json:"disclosed_at,omitempty"`
	// When this problem was first discovered.
	DiscoveredAt *time.Time `json:"discovered_at,omitempty"`
	Id string `json:"id"`
	Source string `json:"source"`
	// When this problem was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// An optional URL for this problem.
	Url *string `json:"url,omitempty"`
}

type _Problem Problem

// NewProblem instantiates a new Problem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblem(id string, source string) *Problem {
	this := Problem{}
	this.Id = id
	this.Source = source
	return &this
}

// NewProblemWithDefaults instantiates a new Problem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemWithDefaults() *Problem {
	this := Problem{}
	return &this
}

// GetDisclosedAt returns the DisclosedAt field value if set, zero value otherwise.
func (o *Problem) GetDisclosedAt() time.Time {
	if o == nil || IsNil(o.DisclosedAt) {
		var ret time.Time
		return ret
	}
	return *o.DisclosedAt
}

// GetDisclosedAtOk returns a tuple with the DisclosedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetDisclosedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DisclosedAt) {
		return nil, false
	}
	return o.DisclosedAt, true
}

// HasDisclosedAt returns a boolean if a field has been set.
func (o *Problem) HasDisclosedAt() bool {
	if o != nil && !IsNil(o.DisclosedAt) {
		return true
	}

	return false
}

// SetDisclosedAt gets a reference to the given time.Time and assigns it to the DisclosedAt field.
func (o *Problem) SetDisclosedAt(v time.Time) {
	o.DisclosedAt = &v
}

// GetDiscoveredAt returns the DiscoveredAt field value if set, zero value otherwise.
func (o *Problem) GetDiscoveredAt() time.Time {
	if o == nil || IsNil(o.DiscoveredAt) {
		var ret time.Time
		return ret
	}
	return *o.DiscoveredAt
}

// GetDiscoveredAtOk returns a tuple with the DiscoveredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetDiscoveredAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DiscoveredAt) {
		return nil, false
	}
	return o.DiscoveredAt, true
}

// HasDiscoveredAt returns a boolean if a field has been set.
func (o *Problem) HasDiscoveredAt() bool {
	if o != nil && !IsNil(o.DiscoveredAt) {
		return true
	}

	return false
}

// SetDiscoveredAt gets a reference to the given time.Time and assigns it to the DiscoveredAt field.
func (o *Problem) SetDiscoveredAt(v time.Time) {
	o.DiscoveredAt = &v
}

// GetId returns the Id field value
func (o *Problem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Problem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Problem) SetId(v string) {
	o.Id = v
}

// GetSource returns the Source field value
func (o *Problem) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *Problem) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *Problem) SetSource(v string) {
	o.Source = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Problem) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Problem) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Problem) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Problem) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Problem) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Problem) SetUrl(v string) {
	o.Url = &v
}

func (o Problem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Problem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisclosedAt) {
		toSerialize["disclosed_at"] = o.DisclosedAt
	}
	if !IsNil(o.DiscoveredAt) {
		toSerialize["discovered_at"] = o.DiscoveredAt
	}
	toSerialize["id"] = o.Id
	toSerialize["source"] = o.Source
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

func (o *Problem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProblem := _Problem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProblem)

	if err != nil {
		return err
	}

	*o = Problem(varProblem)

	return err
}

type NullableProblem struct {
	value *Problem
	isSet bool
}

func (v NullableProblem) Get() *Problem {
	return v.value
}

func (v *NullableProblem) Set(val *Problem) {
	v.value = val
	v.isSet = true
}

func (v NullableProblem) IsSet() bool {
	return v.isSet
}

func (v *NullableProblem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblem(val *Problem) *NullableProblem {
	return &NullableProblem{value: val, isSet: true}
}

func (v NullableProblem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


