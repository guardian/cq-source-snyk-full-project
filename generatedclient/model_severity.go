/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Severity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Severity{}

// Severity struct for Severity
type Severity struct {
	Level *string `json:"level,omitempty"`
	// The CVSSv3 value of the vulnerability.
	Score NullableFloat32 `json:"score,omitempty"`
	// The source of this severity. The value must be the id of a referenced problem or class, in which case that problem or class is the source of this issue. If source is omitted, this severity is sourced internally in the Snyk application.
	Source *string `json:"source,omitempty"`
	// The CVSSv3 value of the vulnerability.
	Vector NullableString `json:"vector,omitempty"`
}

// NewSeverity instantiates a new Severity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeverity() *Severity {
	this := Severity{}
	return &this
}

// NewSeverityWithDefaults instantiates a new Severity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeverityWithDefaults() *Severity {
	this := Severity{}
	return &this
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *Severity) GetLevel() string {
	if o == nil || IsNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Severity) GetLevelOk() (*string, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *Severity) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *Severity) SetLevel(v string) {
	o.Level = &v
}

// GetScore returns the Score field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Severity) GetScore() float32 {
	if o == nil || IsNil(o.Score.Get()) {
		var ret float32
		return ret
	}
	return *o.Score.Get()
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Severity) GetScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Score.Get(), o.Score.IsSet()
}

// HasScore returns a boolean if a field has been set.
func (o *Severity) HasScore() bool {
	if o != nil && o.Score.IsSet() {
		return true
	}

	return false
}

// SetScore gets a reference to the given NullableFloat32 and assigns it to the Score field.
func (o *Severity) SetScore(v float32) {
	o.Score.Set(&v)
}
// SetScoreNil sets the value for Score to be an explicit nil
func (o *Severity) SetScoreNil() {
	o.Score.Set(nil)
}

// UnsetScore ensures that no value is present for Score, not even an explicit nil
func (o *Severity) UnsetScore() {
	o.Score.Unset()
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Severity) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Severity) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Severity) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *Severity) SetSource(v string) {
	o.Source = &v
}

// GetVector returns the Vector field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Severity) GetVector() string {
	if o == nil || IsNil(o.Vector.Get()) {
		var ret string
		return ret
	}
	return *o.Vector.Get()
}

// GetVectorOk returns a tuple with the Vector field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Severity) GetVectorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vector.Get(), o.Vector.IsSet()
}

// HasVector returns a boolean if a field has been set.
func (o *Severity) HasVector() bool {
	if o != nil && o.Vector.IsSet() {
		return true
	}

	return false
}

// SetVector gets a reference to the given NullableString and assigns it to the Vector field.
func (o *Severity) SetVector(v string) {
	o.Vector.Set(&v)
}
// SetVectorNil sets the value for Vector to be an explicit nil
func (o *Severity) SetVectorNil() {
	o.Vector.Set(nil)
}

// UnsetVector ensures that no value is present for Vector, not even an explicit nil
func (o *Severity) UnsetVector() {
	o.Vector.Unset()
}

func (o Severity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Severity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if o.Score.IsSet() {
		toSerialize["score"] = o.Score.Get()
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if o.Vector.IsSet() {
		toSerialize["vector"] = o.Vector.Get()
	}
	return toSerialize, nil
}

type NullableSeverity struct {
	value *Severity
	isSet bool
}

func (v NullableSeverity) Get() *Severity {
	return v.value
}

func (v *NullableSeverity) Set(val *Severity) {
	v.value = val
	v.isSet = true
}

func (v NullableSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeverity(val *Severity) *NullableSeverity {
	return &NullableSeverity{value: val, isSet: true}
}

func (v NullableSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


