/*
Snyk API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: REST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IssuesWithPurlsResponseMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssuesWithPurlsResponseMeta{}

// IssuesWithPurlsResponseMeta struct for IssuesWithPurlsResponseMeta
type IssuesWithPurlsResponseMeta struct {
	Errors []Error `json:"errors,omitempty"`
}

// NewIssuesWithPurlsResponseMeta instantiates a new IssuesWithPurlsResponseMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuesWithPurlsResponseMeta() *IssuesWithPurlsResponseMeta {
	this := IssuesWithPurlsResponseMeta{}
	return &this
}

// NewIssuesWithPurlsResponseMetaWithDefaults instantiates a new IssuesWithPurlsResponseMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuesWithPurlsResponseMetaWithDefaults() *IssuesWithPurlsResponseMeta {
	this := IssuesWithPurlsResponseMeta{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *IssuesWithPurlsResponseMeta) GetErrors() []Error {
	if o == nil || IsNil(o.Errors) {
		var ret []Error
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesWithPurlsResponseMeta) GetErrorsOk() ([]Error, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *IssuesWithPurlsResponseMeta) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Error and assigns it to the Errors field.
func (o *IssuesWithPurlsResponseMeta) SetErrors(v []Error) {
	o.Errors = v
}

func (o IssuesWithPurlsResponseMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssuesWithPurlsResponseMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableIssuesWithPurlsResponseMeta struct {
	value *IssuesWithPurlsResponseMeta
	isSet bool
}

func (v NullableIssuesWithPurlsResponseMeta) Get() *IssuesWithPurlsResponseMeta {
	return v.value
}

func (v *NullableIssuesWithPurlsResponseMeta) Set(val *IssuesWithPurlsResponseMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesWithPurlsResponseMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesWithPurlsResponseMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesWithPurlsResponseMeta(val *IssuesWithPurlsResponseMeta) *NullableIssuesWithPurlsResponseMeta {
	return &NullableIssuesWithPurlsResponseMeta{value: val, isSet: true}
}

func (v NullableIssuesWithPurlsResponseMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesWithPurlsResponseMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


